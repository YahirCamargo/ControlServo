
controlServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d54  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f24  08003f24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f2c  08003f2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08003f40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003f40  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d877  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ded  00000000  00000000  0002d8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bf4  00000000  00000000  00030df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e5  00000000  00000000  000479ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e817  00000000  00000000  00055fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e47e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000e4838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ed4 	.word	0x08003ed4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003ed4 	.word	0x08003ed4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b974 	b.w	8000cc4 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468e      	mov	lr, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14d      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4694      	mov	ip, r2
 8000a06:	d969      	bls.n	8000adc <__udivmoddi4+0xe8>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b152      	cbz	r2, 8000a24 <__udivmoddi4+0x30>
 8000a0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a12:	f1c2 0120 	rsb	r1, r2, #32
 8000a16:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a22:	4094      	lsls	r4, r2
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	0c21      	lsrs	r1, r4, #16
 8000a2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a2e:	fa1f f78c 	uxth.w	r7, ip
 8000a32:	fb08 e316 	mls	r3, r8, r6, lr
 8000a36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3a:	fb06 f107 	mul.w	r1, r6, r7
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a4a:	f080 811f 	bcs.w	8000c8c <__udivmoddi4+0x298>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 811c 	bls.w	8000c8c <__udivmoddi4+0x298>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a60:	fb08 3310 	mls	r3, r8, r0, r3
 8000a64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a68:	fb00 f707 	mul.w	r7, r0, r7
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x92>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a78:	f080 810a 	bcs.w	8000c90 <__udivmoddi4+0x29c>
 8000a7c:	42a7      	cmp	r7, r4
 8000a7e:	f240 8107 	bls.w	8000c90 <__udivmoddi4+0x29c>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	1be4      	subs	r4, r4, r7
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	b11d      	cbz	r5, 8000a98 <__udivmoddi4+0xa4>
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	2300      	movs	r3, #0
 8000a94:	e9c5 4300 	strd	r4, r3, [r5]
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d909      	bls.n	8000ab6 <__udivmoddi4+0xc2>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	f000 80ef 	beq.w	8000c86 <__udivmoddi4+0x292>
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000aae:	4630      	mov	r0, r6
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	fab3 f683 	clz	r6, r3
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d14a      	bne.n	8000b54 <__udivmoddi4+0x160>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xd4>
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	f200 80f9 	bhi.w	8000cba <__udivmoddi4+0x2c6>
 8000ac8:	1a84      	subs	r4, r0, r2
 8000aca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e0      	beq.n	8000a98 <__udivmoddi4+0xa4>
 8000ad6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ada:	e7dd      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000adc:	b902      	cbnz	r2, 8000ae0 <__udivmoddi4+0xec>
 8000ade:	deff      	udf	#255	; 0xff
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f040 8092 	bne.w	8000c0e <__udivmoddi4+0x21a>
 8000aea:	eba1 010c 	sub.w	r1, r1, ip
 8000aee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	2601      	movs	r6, #1
 8000af8:	0c20      	lsrs	r0, r4, #16
 8000afa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000afe:	fb07 1113 	mls	r1, r7, r3, r1
 8000b02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b06:	fb0e f003 	mul.w	r0, lr, r3
 8000b0a:	4288      	cmp	r0, r1
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x12c>
 8000b0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x12a>
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	f200 80cb 	bhi.w	8000cb4 <__udivmoddi4+0x2c0>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	1a09      	subs	r1, r1, r0
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b28:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b30:	fb0e fe00 	mul.w	lr, lr, r0
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x156>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x154>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f200 80bb 	bhi.w	8000cbe <__udivmoddi4+0x2ca>
 8000b48:	4608      	mov	r0, r1
 8000b4a:	eba4 040e 	sub.w	r4, r4, lr
 8000b4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x9a>
 8000b54:	f1c6 0720 	rsb	r7, r6, #32
 8000b58:	40b3      	lsls	r3, r6
 8000b5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b62:	fa20 f407 	lsr.w	r4, r0, r7
 8000b66:	fa01 f306 	lsl.w	r3, r1, r6
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	40f9      	lsrs	r1, r7
 8000b6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b72:	fa00 f306 	lsl.w	r3, r0, r6
 8000b76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b7a:	0c20      	lsrs	r0, r4, #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fb09 1118 	mls	r1, r9, r8, r1
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	fb08 f00e 	mul.w	r0, r8, lr
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b8>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9c:	f080 8088 	bcs.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f240 8085 	bls.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba6:	f1a8 0802 	sub.w	r8, r8, #2
 8000baa:	4461      	add	r1, ip
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	458e      	cmp	lr, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1e2>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bcc:	d26c      	bcs.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bce:	458e      	cmp	lr, r1
 8000bd0:	d96a      	bls.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bda:	fba0 9402 	umull	r9, r4, r0, r2
 8000bde:	eba1 010e 	sub.w	r1, r1, lr
 8000be2:	42a1      	cmp	r1, r4
 8000be4:	46c8      	mov	r8, r9
 8000be6:	46a6      	mov	lr, r4
 8000be8:	d356      	bcc.n	8000c98 <__udivmoddi4+0x2a4>
 8000bea:	d053      	beq.n	8000c94 <__udivmoddi4+0x2a0>
 8000bec:	b15d      	cbz	r5, 8000c06 <__udivmoddi4+0x212>
 8000bee:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bfe:	40f1      	lsrs	r1, r6
 8000c00:	431f      	orrs	r7, r3
 8000c02:	e9c5 7100 	strd	r7, r1, [r5]
 8000c06:	2600      	movs	r6, #0
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa21 f303 	lsr.w	r3, r1, r3
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c30:	0c0b      	lsrs	r3, r1, #16
 8000c32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c36:	fb00 f60e 	mul.w	r6, r0, lr
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x260>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4a:	d22f      	bcs.n	8000cac <__udivmoddi4+0x2b8>
 8000c4c:	429e      	cmp	r6, r3
 8000c4e:	d92d      	bls.n	8000cac <__udivmoddi4+0x2b8>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	b289      	uxth	r1, r1
 8000c58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c64:	fb06 f30e 	mul.w	r3, r6, lr
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x28a>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c74:	d216      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d914      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c7a:	3e02      	subs	r6, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	1ac9      	subs	r1, r1, r3
 8000c80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c84:	e738      	b.n	8000af8 <__udivmoddi4+0x104>
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e705      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e3      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6f8      	b.n	8000a86 <__udivmoddi4+0x92>
 8000c94:	454b      	cmp	r3, r9
 8000c96:	d2a9      	bcs.n	8000bec <__udivmoddi4+0x1f8>
 8000c98:	ebb9 0802 	subs.w	r8, r9, r2
 8000c9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7a3      	b.n	8000bec <__udivmoddi4+0x1f8>
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	e7ea      	b.n	8000c7e <__udivmoddi4+0x28a>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	e794      	b.n	8000bd6 <__udivmoddi4+0x1e2>
 8000cac:	4640      	mov	r0, r8
 8000cae:	e7d1      	b.n	8000c54 <__udivmoddi4+0x260>
 8000cb0:	46d0      	mov	r8, sl
 8000cb2:	e77b      	b.n	8000bac <__udivmoddi4+0x1b8>
 8000cb4:	3b02      	subs	r3, #2
 8000cb6:	4461      	add	r1, ip
 8000cb8:	e732      	b.n	8000b20 <__udivmoddi4+0x12c>
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e709      	b.n	8000ad2 <__udivmoddi4+0xde>
 8000cbe:	4464      	add	r4, ip
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	e742      	b.n	8000b4a <__udivmoddi4+0x156>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a43      	ldr	r2, [pc, #268]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a3c      	ldr	r2, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a35      	ldr	r2, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a2e      	ldr	r2, [pc, #184]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <MX_GPIO_Init+0x12c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MandadorFotoTran_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2122      	movs	r1, #34	; 0x22
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <MX_GPIO_Init+0x130>)
 8000d54:	f001 f988 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5e:	4827      	ldr	r0, [pc, #156]	; (8000dfc <MX_GPIO_Init+0x134>)
 8000d60:	f001 f982 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <MX_GPIO_Init+0x138>)
 8000d7c:	f000 ffd8 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RecibidorUnPeso_Pin|RecibidorDosPesos_Pin|RecibidorCincoPesos_Pin|RecibidorDiezPesos_Pin;
 8000d80:	230f      	movs	r3, #15
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	481b      	ldr	r0, [pc, #108]	; (8000e00 <MX_GPIO_Init+0x138>)
 8000d94:	f000 ffcc 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MandadorFotoTran_Pin|LD2_Pin;
 8000d98:	2322      	movs	r3, #34	; 0x22
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_GPIO_Init+0x130>)
 8000db0:	f000 ffbe 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RecibidorFotoTran_Pin;
 8000db4:	2310      	movs	r3, #16
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RecibidorFotoTran_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_GPIO_Init+0x130>)
 8000dc8:	f000 ffb2 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8000dcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_GPIO_Init+0x134>)
 8000de6:	f000 ffa3 	bl	8001d30 <HAL_GPIO_Init>

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40020800 	.word	0x40020800

08000e04 <HCSR04_Init>:
		}
	}
}

void HCSR04_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <HCSR04_Init+0x1c>)
 8000e10:	f001 f92a 	bl	8002068 <HAL_GPIO_WritePin>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <HCSR04_Init+0x20>)
 8000e18:	f001 ff30 	bl	8002c7c <HAL_TIM_IC_Start_IT>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	2000002c 	.word	0x2000002c

08000e28 <HCSR04_Get_Distance>:

uint16_t HCSR04_Get_Distance(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	480f      	ldr	r0, [pc, #60]	; (8000e70 <HCSR04_Get_Distance+0x48>)
 8000e34:	f001 f918 	bl	8002068 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCounter(&htim1, 0);
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HCSR04_Get_Distance+0x4c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim1) < 10);
 8000e40:	bf00      	nop
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HCSR04_Get_Distance+0x4c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d9fa      	bls.n	8000e42 <HCSR04_Get_Distance+0x1a>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <HCSR04_Get_Distance+0x48>)
 8000e54:	f001 f908 	bl	8002068 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HCSR04_Get_Distance+0x4c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HCSR04_Get_Distance+0x4c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0202 	orr.w	r2, r2, #2
 8000e66:	60da      	str	r2, [r3, #12]
	return dist;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HCSR04_Get_Distance+0x50>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020400 	.word	0x40020400
 8000e74:	2000002c 	.word	0x2000002c
 8000e78:	20000028 	.word	0x20000028
 8000e7c:	00000000 	.word	0x00000000

08000e80 <servoEnGrados>:
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
	int servoEnGrados(int grados){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
		int gradosParaPlaca=(ceil(gradosParaPlaca=(grados*11.111)+500));
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff faf7 	bl	800047c <__aeabi_i2d>
 8000e8e:	a315      	add	r3, pc, #84	; (adr r3, 8000ee4 <servoEnGrados+0x64>)
 8000e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e94:	f7ff fb5c 	bl	8000550 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <servoEnGrados+0x60>)
 8000ea6:	f7ff f99d 	bl	80001e4 <__adddf3>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f7ff fd5f 	bl	8000974 <__aeabi_d2iz>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff fade 	bl	800047c <__aeabi_i2d>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fd54 	bl	8000974 <__aeabi_d2iz>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60fb      	str	r3, [r7, #12]
		return gradosParaPlaca;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
	}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	407f4000 	.word	0x407f4000
 8000ee4:	fdf3b646 	.word	0xfdf3b646
 8000ee8:	402638d4 	.word	0x402638d4

08000eec <cicloFor>:

	int cicloFor(TIM_HandleTypeDef servoMotor,int detector){
 8000eec:	b084      	sub	sp, #16
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	f107 0c10 	add.w	ip, r7, #16
 8000ef8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		for(int i=0;i<51;i++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	e013      	b.n	8000f2a <cicloFor+0x3e>
			servoMotor.Instance->CCR1=servoEnGrados(i);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffbc 	bl	8000e80 <servoEnGrados>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
			if(HCSR04_Get_Distance()<9){
 8000f0e:	f7ff ff8b 	bl	8000e28 <HCSR04_Get_Distance>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d802      	bhi.n	8000f1e <cicloFor+0x32>
				detector+=1;
 8000f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			HAL_Delay(40);
 8000f1e:	2028      	movs	r0, #40	; 0x28
 8000f20:	f000 fdfc 	bl	8001b1c <HAL_Delay>
		for(int i=0;i<51;i++){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b32      	cmp	r3, #50	; 0x32
 8000f2e:	dde8      	ble.n	8000f02 <cicloFor+0x16>
		}
		return detector;
 8000f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4770      	bx	lr

08000f40 <setBothServos>:

	void setBothServos(TIM_HandleTypeDef servoMotor1,int gradosServoMotor1,TIM_HandleTypeDef servoMotor2,int gradosServoMotor2){
 8000f40:	b084      	sub	sp, #16
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	f107 0c08 	add.w	ip, r7, #8
 8000f4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		servoMotor1.Instance->CCR1=servoEnGrados(gradosServoMotor1);
 8000f4e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000f50:	f7ff ff96 	bl	8000e80 <servoEnGrados>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
		servoMotor2.Instance->CCR1=servoEnGrados(gradosServoMotor2);
 8000f5a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f5e:	f7ff ff8f 	bl	8000e80 <servoEnGrados>
 8000f62:	4602      	mov	r2, r0
 8000f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <pagar>:

	int pagar(int pagar){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
		int pagado=0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
		while(pagar>pagado){
 8000f80:	e033      	b.n	8000fea <pagar+0x76>
			if(HAL_GPIO_ReadPin(RecibidorUnPeso_GPIO_Port, RecibidorUnPeso_Pin)==0){
 8000f82:	2101      	movs	r1, #1
 8000f84:	481d      	ldr	r0, [pc, #116]	; (8000ffc <pagar+0x88>)
 8000f86:	f001 f857 	bl	8002038 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <pagar+0x28>
				pagado+=1;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f000 fdc0 	bl	8001b1c <HAL_Delay>
			}
			if(HAL_GPIO_ReadPin(RecibidorDosPesos_GPIO_Port, RecibidorDosPesos_Pin)==0){
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <pagar+0x88>)
 8000fa0:	f001 f84a 	bl	8002038 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <pagar+0x42>
				pagado+=2;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3302      	adds	r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f000 fdb3 	bl	8001b1c <HAL_Delay>
			}
			if(HAL_GPIO_ReadPin(RecibidorCincoPesos_GPIO_Port, RecibidorCincoPesos_Pin)==0){
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <pagar+0x88>)
 8000fba:	f001 f83d 	bl	8002038 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <pagar+0x5c>
				pagado+=5;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3305      	adds	r3, #5
 8000fc8:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f000 fda6 	bl	8001b1c <HAL_Delay>
			}
			if(HAL_GPIO_ReadPin(RecibidorDiezPesos_GPIO_Port,RecibidorDiezPesos_Pin)==0){
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <pagar+0x88>)
 8000fd4:	f001 f830 	bl	8002038 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d105      	bne.n	8000fea <pagar+0x76>
				pagado+=5;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3305      	adds	r3, #5
 8000fe2:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f000 fd99 	bl	8001b1c <HAL_Delay>
		while(pagar>pagado){
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dcc7      	bgt.n	8000f82 <pagar+0xe>
			}
		}
		return pagado;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020800 	.word	0x40020800

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b0de      	sub	sp, #376	; 0x178
 8001004:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fd17 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f8e9 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f7ff fe5b 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001012:	f000 fc15 	bl	8001840 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001016:	f000 f9b5 	bl	8001384 <MX_TIM1_Init>
  MX_TIM2_Init();
 800101a:	f000 fa55 	bl	80014c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800101e:	f000 fac9 	bl	80015b4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001022:	f000 fc37 	bl	8001894 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MX_TIM1_Init();
 8001026:	f000 f9ad 	bl	8001384 <MX_TIM1_Init>
  HCSR04_Init();
 800102a:	f7ff feeb 	bl	8000e04 <HCSR04_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800102e:	2100      	movs	r1, #0
 8001030:	4865      	ldr	r0, [pc, #404]	; (80011c8 <main+0x1c8>)
 8001032:	f001 fd73 	bl	8002b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001036:	2100      	movs	r1, #0
 8001038:	4864      	ldr	r0, [pc, #400]	; (80011cc <main+0x1cc>)
 800103a:	f001 fd6f 	bl	8002b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800103e:	2100      	movs	r1, #0
 8001040:	4863      	ldr	r0, [pc, #396]	; (80011d0 <main+0x1d0>)
 8001042:	f001 fd6b 	bl	8002b1c <HAL_TIM_PWM_Start>

  //Para el servo de la pluma
  TIM_HandleTypeDef servoPluma=htim2;
 8001046:	4a61      	ldr	r2, [pc, #388]	; (80011cc <main+0x1cc>)
 8001048:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800104c:	4611      	mov	r1, r2
 800104e:	2248      	movs	r2, #72	; 0x48
 8001050:	4618      	mov	r0, r3
 8001052:	f002 ff29 	bl	8003ea8 <memcpy>

  //Para el servo que detecta el vehiculo
  TIM_HandleTypeDef servoMotorDetector=htim2;
 8001056:	4a5d      	ldr	r2, [pc, #372]	; (80011cc <main+0x1cc>)
 8001058:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800105c:	4611      	mov	r1, r2
 800105e:	2248      	movs	r2, #72	; 0x48
 8001060:	4618      	mov	r0, r3
 8001062:	f002 ff21 	bl	8003ea8 <memcpy>
  //Para el servo que baja el sensor
  TIM_HandleTypeDef servoMotorBajador=htim3;
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <main+0x1d0>)
 8001068:	463b      	mov	r3, r7
 800106a:	4611      	mov	r1, r2
 800106c:	2248      	movs	r2, #72	; 0x48
 800106e:	4618      	mov	r0, r3
 8001070:	f002 ff1a 	bl	8003ea8 <memcpy>
  int detectarVehiculo;
  int moto=12;
 8001074:	230c      	movs	r3, #12
 8001076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  int carro=17;
 800107a:	2311      	movs	r3, #17
 800107c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  int camion=30;
 8001080:	231e      	movs	r3, #30
 8001082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  int paid;
  char* tipoVehiculo;
  while (1)
  {
	  detectarVehiculo=0;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  setBothServos(servoMotorDetector, 10, servoMotorBajador, 60);
 800108c:	233c      	movs	r3, #60	; 0x3c
 800108e:	9321      	str	r3, [sp, #132]	; 0x84
 8001090:	a80f      	add	r0, sp, #60	; 0x3c
 8001092:	463b      	mov	r3, r7
 8001094:	2248      	movs	r2, #72	; 0x48
 8001096:	4619      	mov	r1, r3
 8001098:	f002 ff06 	bl	8003ea8 <memcpy>
 800109c:	230a      	movs	r3, #10
 800109e:	930e      	str	r3, [sp, #56]	; 0x38
 80010a0:	466d      	mov	r5, sp
 80010a2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80010a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c0:	f7ff ff3e 	bl	8000f40 <setBothServos>

	  detectarVehiculo=cicloFor(servoMotorDetector,detectarVehiculo);
 80010c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010c8:	930e      	str	r3, [sp, #56]	; 0x38
 80010ca:	466d      	mov	r5, sp
 80010cc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80010d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ea:	f7ff feff 	bl	8000eec <cicloFor>
 80010ee:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	  if(detectarVehiculo>3){
 80010f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	dd0c      	ble.n	8001114 <main+0x114>
		  //Significa que es camion
		  tipoVehiculo="Camion";
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <main+0x1d4>)
 80010fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		  paid=pagar(camion);
 8001100:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001104:	f7ff ff36 	bl	8000f74 <pagar>
 8001108:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		  HAL_Delay(100);
 800110c:	2064      	movs	r0, #100	; 0x64
 800110e:	f000 fd05 	bl	8001b1c <HAL_Delay>
 8001112:	e054      	b.n	80011be <main+0x1be>
	  }else{
		  detectarVehiculo=0;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		  setBothServos(servoMotorDetector, 10, servoMotorBajador, 0);
 800111a:	2300      	movs	r3, #0
 800111c:	9321      	str	r3, [sp, #132]	; 0x84
 800111e:	a80f      	add	r0, sp, #60	; 0x3c
 8001120:	463b      	mov	r3, r7
 8001122:	2248      	movs	r2, #72	; 0x48
 8001124:	4619      	mov	r1, r3
 8001126:	f002 febf 	bl	8003ea8 <memcpy>
 800112a:	230a      	movs	r3, #10
 800112c:	930e      	str	r3, [sp, #56]	; 0x38
 800112e:	466d      	mov	r5, sp
 8001130:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001144:	e885 0003 	stmia.w	r5, {r0, r1}
 8001148:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114e:	f7ff fef7 	bl	8000f40 <setBothServos>
		  detectarVehiculo=cicloFor(servoMotorDetector,detectarVehiculo);
 8001152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001156:	930e      	str	r3, [sp, #56]	; 0x38
 8001158:	466d      	mov	r5, sp
 800115a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001178:	f7ff feb8 	bl	8000eec <cicloFor>
 800117c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

		  if(detectarVehiculo>3){
 8001180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001184:	2b03      	cmp	r3, #3
 8001186:	dd0d      	ble.n	80011a4 <main+0x1a4>
			  //tipoVehiculo='A';
			  tipoVehiculo="Automovil";
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <main+0x1d8>)
 800118a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			  paid=pagar(carro);
 800118e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001192:	f7ff feef 	bl	8000f74 <pagar>
 8001196:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			  HAL_Delay(5000);
 800119a:	f241 3088 	movw	r0, #5000	; 0x1388
 800119e:	f000 fcbd 	bl	8001b1c <HAL_Delay>
 80011a2:	e00c      	b.n	80011be <main+0x1be>
		  }else{
			  //tipoVehiculo='M';
			  tipoVehiculo="Motocicleta";
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <main+0x1dc>)
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			  paid=pagar(moto);
 80011aa:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80011ae:	f7ff fee1 	bl	8000f74 <pagar>
 80011b2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			  HAL_Delay(5000);
 80011b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80011ba:	f000 fcaf 	bl	8001b1c <HAL_Delay>
		  }
	  }
	  HAL_Delay(50);
 80011be:	2032      	movs	r0, #50	; 0x32
 80011c0:	f000 fcac 	bl	8001b1c <HAL_Delay>
	  detectarVehiculo=0;
 80011c4:	e75f      	b.n	8001086 <main+0x86>
 80011c6:	bf00      	nop
 80011c8:	2000002c 	.word	0x2000002c
 80011cc:	20000074 	.word	0x20000074
 80011d0:	200000bc 	.word	0x200000bc
 80011d4:	08003eec 	.word	0x08003eec
 80011d8:	08003ef4 	.word	0x08003ef4
 80011dc:	08003f00 	.word	0x08003f00

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	; 0x50
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	2230      	movs	r2, #48	; 0x30
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fe68 	bl	8003ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <SystemClock_Config+0xc8>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <SystemClock_Config+0xc8>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <SystemClock_Config+0xc8>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <SystemClock_Config+0xcc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a20      	ldr	r2, [pc, #128]	; (80012ac <SystemClock_Config+0xcc>)
 800122a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <SystemClock_Config+0xcc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001250:	2308      	movs	r3, #8
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001254:	2348      	movs	r3, #72	; 0x48
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff19 	bl	800209c <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001270:	f000 f81e 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2102      	movs	r1, #2
 8001290:	4618      	mov	r0, r3
 8001292:	f001 f97b 	bl	800258c <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800129c:	f000 f808 	bl	80012b0 <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3750      	adds	r7, #80	; 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012fa:	2007      	movs	r0, #7
 80012fc:	f000 fce4 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 fbc0 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b096      	sub	sp, #88	; 0x58
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2220      	movs	r2, #32
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fd81 	bl	8003ec4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013c4:	4a3f      	ldr	r2, [pc, #252]	; (80014c4 <MX_TIM1_Init+0x140>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80013c8:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013ca:	2247      	movs	r2, #71	; 0x47
 80013cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80013d4:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e2:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80013f0:	f001 faec 	bl	80029cc <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013fa:	f7ff ff59 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001408:	4619      	mov	r1, r3
 800140a:	482d      	ldr	r0, [pc, #180]	; (80014c0 <MX_TIM1_Init+0x13c>)
 800140c:	f001 fe12 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001416:	f7ff ff4b 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800141a:	4829      	ldr	r0, [pc, #164]	; (80014c0 <MX_TIM1_Init+0x13c>)
 800141c:	f001 fb25 	bl	8002a6a <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001426:	f7ff ff43 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001436:	4619      	mov	r1, r3
 8001438:	4821      	ldr	r0, [pc, #132]	; (80014c0 <MX_TIM1_Init+0x13c>)
 800143a:	f002 f98f 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001444:	f7ff ff34 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800144c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_TIM1_Init+0x13c>)
 8001470:	f001 fd1e 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800147a:	f7ff ff19 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80014a2:	f002 f9c9 	bl	8003838 <HAL_TIMEx_ConfigBreakDeadTime>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80014ac:	f7ff ff00 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM1_Init+0x13c>)
 80014b2:	f000 f941 	bl	8001738 <HAL_TIM_MspPostInit>

}
 80014b6:	bf00      	nop
 80014b8:	3758      	adds	r7, #88	; 0x58
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000002c 	.word	0x2000002c
 80014c4:	40010000 	.word	0x40010000

080014c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <MX_TIM2_Init+0xe8>)
 80014fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <MX_TIM2_Init+0xe8>)
 8001502:	2247      	movs	r2, #71	; 0x47
 8001504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <MX_TIM2_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <MX_TIM2_Init+0xe8>)
 800150e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <MX_TIM2_Init+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <MX_TIM2_Init+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001520:	4823      	ldr	r0, [pc, #140]	; (80015b0 <MX_TIM2_Init+0xe8>)
 8001522:	f001 fa53 	bl	80029cc <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800152c:	f7ff fec0 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	4619      	mov	r1, r3
 800153c:	481c      	ldr	r0, [pc, #112]	; (80015b0 <MX_TIM2_Init+0xe8>)
 800153e:	f001 fd79 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001548:	f7ff feb2 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800154c:	4818      	ldr	r0, [pc, #96]	; (80015b0 <MX_TIM2_Init+0xe8>)
 800154e:	f001 fa8c 	bl	8002a6a <HAL_TIM_PWM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001558:	f7ff feaa 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4619      	mov	r1, r3
 800156a:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_TIM2_Init+0xe8>)
 800156c:	f002 f8f6 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001576:	f7ff fe9b 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157a:	2360      	movs	r3, #96	; 0x60
 800157c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800157e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <MX_TIM2_Init+0xe8>)
 8001594:	f001 fc8c 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800159e:	f7ff fe87 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015a2:	4803      	ldr	r0, [pc, #12]	; (80015b0 <MX_TIM2_Init+0xe8>)
 80015a4:	f000 f8c8 	bl	8001738 <HAL_TIM_MspPostInit>

}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	; 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000074 	.word	0x20000074

080015b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015e6:	4a2d      	ldr	r2, [pc, #180]	; (800169c <MX_TIM3_Init+0xe8>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015ec:	2247      	movs	r2, #71	; 0x47
 80015ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM3_Init+0xe4>)
 80015f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800160a:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM3_Init+0xe4>)
 800160c:	f001 f9de 	bl	80029cc <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001616:	f7ff fe4b 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001628:	f001 fd04 	bl	8003034 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001632:	f7ff fe3d 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001636:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001638:	f001 fa17 	bl	8002a6a <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001642:	f7ff fe35 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	4619      	mov	r1, r3
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM3_Init+0xe4>)
 8001656:	f002 f881 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001660:	f7ff fe26 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM3_Init+0xe4>)
 800167c:	f001 fc18 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001686:	f7ff fe13 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM3_Init+0xe4>)
 800168c:	f000 f854 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200000bc 	.word	0x200000bc
 800169c:	40000400 	.word	0x40000400

080016a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_TIM_Base_MspInit+0x8c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10e      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80016ce:	e026      	b.n	800171e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
}
 80016f6:	e012      	b.n	800171e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <HAL_TIM_Base_MspInit+0x94>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10d      	bne.n	800171e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_TIM_Base_MspInit+0x90>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40010000 	.word	0x40010000
 8001730:	40023800 	.word	0x40023800
 8001734:	40000400 	.word	0x40000400

08001738 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a36      	ldr	r2, [pc, #216]	; (8001830 <HAL_TIM_MspPostInit+0xf8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d11f      	bne.n	800179a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001788:	2301      	movs	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <HAL_TIM_MspPostInit+0x100>)
 8001794:	f000 facc 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001798:	e046      	b.n	8001828 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a2:	d11e      	bne.n	80017e2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c0:	2301      	movs	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017d0:	2301      	movs	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4817      	ldr	r0, [pc, #92]	; (8001838 <HAL_TIM_MspPostInit+0x100>)
 80017dc:	f000 faa8 	bl	8001d30 <HAL_GPIO_Init>
}
 80017e0:	e022      	b.n	8001828 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <HAL_TIM_MspPostInit+0x104>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d11d      	bne.n	8001828 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_TIM_MspPostInit+0xfc>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001818:	2302      	movs	r3, #2
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_TIM_MspPostInit+0x100>)
 8001824:	f000 fa84 	bl	8001d30 <HAL_GPIO_Init>
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40010000 	.word	0x40010000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40000400 	.word	0x40000400

08001840 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART2_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001878:	f002 f830 	bl	80038dc <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f7ff fd15 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000104 	.word	0x20000104
 8001890:	40004400 	.word	0x40004400

08001894 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART6_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART6_UART_Init+0x4c>)
 80018cc:	f002 f806 	bl	80038dc <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f7ff fceb 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000148 	.word	0x20000148
 80018e4:	40011400 	.word	0x40011400

080018e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <HAL_UART_MspInit+0xe8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12c      	bne.n	8001964 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a29      	ldr	r2, [pc, #164]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001942:	230c      	movs	r3, #12
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001952:	2307      	movs	r3, #7
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	481e      	ldr	r0, [pc, #120]	; (80019d8 <HAL_UART_MspInit+0xf0>)
 800195e:	f000 f9e7 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001962:	e030      	b.n	80019c6 <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART6)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_UART_MspInit+0xf4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12b      	bne.n	80019c6 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a6:	23c0      	movs	r3, #192	; 0xc0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019b6:	2308      	movs	r3, #8
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <HAL_UART_MspInit+0xf8>)
 80019c2:	f000 f9b5 	bl	8001d30 <HAL_GPIO_Init>
}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40004400 	.word	0x40004400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40011400 	.word	0x40011400
 80019e0:	40020800 	.word	0x40020800

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff fca7 	bl	8001360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f002 fa25 	bl	8003e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff faf3 	bl	8001000 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a28:	08003f34 	.word	0x08003f34
  ldr r2, =_sbss
 8001a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a30:	20000190 	.word	0x20000190

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f931 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fc26 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f93b 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f911 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000018c 	.word	0x2000018c

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2000018c 	.word	0x2000018c

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff47 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5c 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e159      	b.n	8002000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8148 	bne.w	8001ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a2 	beq.w	8001ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x202>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2f4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x1fe>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_GPIO_Init+0x2f8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x1fa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2fc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x1f6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x1f2>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f aea2 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	619a      	str	r2, [r3, #24]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e267      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d075      	beq.n	80021a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d00c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c6:	4b85      	ldr	r3, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d112      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d2:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020de:	d10b      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	4b7e      	ldr	r3, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d05b      	beq.n	80021a4 <HAL_RCC_OscConfig+0x108>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d157      	bne.n	80021a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e242      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d106      	bne.n	8002110 <HAL_RCC_OscConfig+0x74>
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a75      	ldr	r2, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x98>
 800211a:	4b70      	ldr	r3, [pc, #448]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6f      	ldr	r2, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b6d      	ldr	r3, [pc, #436]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6c      	ldr	r2, [pc, #432]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xb0>
 8002134:	4b69      	ldr	r3, [pc, #420]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a68      	ldr	r2, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fcd6 	bl	8001b04 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fcd2 	bl	8001b04 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e207      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xc0>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fcc2 	bl	8001b04 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fcbe 	bl	8001b04 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1f3      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0xe8>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b2:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ca:	4b44      	ldr	r3, [pc, #272]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x152>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1c7      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e03a      	b.n	800227a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_OscConfig+0x244>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff fc77 	bl	8001b04 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff fc73 	bl	8001b04 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1a8      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4925      	ldr	r1, [pc, #148]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x244>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7ff fc56 	bl	8001b04 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225c:	f7ff fc52 	bl	8001b04 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e187      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d036      	beq.n	80022f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_RCC_OscConfig+0x248>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff fc36 	bl	8001b04 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229c:	f7ff fc32 	bl	8001b04 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e167      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_OscConfig+0x240>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x200>
 80022ba:	e01b      	b.n	80022f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_OscConfig+0x248>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff fc1f 	bl	8001b04 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	e00e      	b.n	80022e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ca:	f7ff fc1b 	bl	8001b04 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d907      	bls.n	80022e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e150      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	42470000 	.word	0x42470000
 80022e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80022ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ea      	bne.n	80022ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8097 	beq.w	8002430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b81      	ldr	r3, [pc, #516]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b7d      	ldr	r3, [pc, #500]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a7c      	ldr	r2, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x470>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b7a      	ldr	r3, [pc, #488]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b77      	ldr	r3, [pc, #476]	; (8002510 <HAL_RCC_OscConfig+0x474>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	4b74      	ldr	r3, [pc, #464]	; (8002510 <HAL_RCC_OscConfig+0x474>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a73      	ldr	r2, [pc, #460]	; (8002510 <HAL_RCC_OscConfig+0x474>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7ff fbdb 	bl	8001b04 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7ff fbd7 	bl	8001b04 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e10c      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x474>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x2ea>
 8002378:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a63      	ldr	r2, [pc, #396]	; (800250c <HAL_RCC_OscConfig+0x470>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	e01c      	b.n	80023c0 <HAL_RCC_OscConfig+0x324>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x30c>
 800238e:	4b5f      	ldr	r3, [pc, #380]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a5e      	ldr	r2, [pc, #376]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0x324>
 80023a8:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a57      	ldr	r2, [pc, #348]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
 80023b4:	4b55      	ldr	r3, [pc, #340]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	4a54      	ldr	r2, [pc, #336]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7ff fb9c 	bl	8001b04 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7ff fb98 	bl	8001b04 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0cb      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ee      	beq.n	80023d0 <HAL_RCC_OscConfig+0x334>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fb86 	bl	8001b04 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7ff fb82 	bl	8001b04 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e0b5      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	4b3e      	ldr	r3, [pc, #248]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ee      	bne.n	80023fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_RCC_OscConfig+0x470>)
 800242a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a1 	beq.w	800257c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800243a:	4b34      	ldr	r3, [pc, #208]	; (800250c <HAL_RCC_OscConfig+0x470>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d05c      	beq.n	8002500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d141      	bne.n	80024d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_OscConfig+0x478>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fb56 	bl	8001b04 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff fb52 	bl	8001b04 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e087      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x470>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	019b      	lsls	r3, r3, #6
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	491b      	ldr	r1, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x478>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff fb2b 	bl	8001b04 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff fb27 	bl	8001b04 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e05c      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x416>
 80024d0:	e054      	b.n	800257c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_RCC_OscConfig+0x478>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fb14 	bl	8001b04 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7ff fb10 	bl	8001b04 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e045      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x470>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x444>
 80024fe:	e03d      	b.n	800257c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e038      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000
 8002514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x4ec>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d028      	beq.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d121      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d11a      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800254e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002550:	4293      	cmp	r3, r2
 8002552:	d111      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7ff fa42 	bl	8001b04 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7ff fa3e 	bl	8001b04 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f9a2 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08003f0c 	.word	0x08003f0c
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b094      	sub	sp, #80	; 0x50
 800275e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
 8002764:	2300      	movs	r3, #0
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002768:	2300      	movs	r3, #0
 800276a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d00d      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x40>
 800277c:	2b08      	cmp	r3, #8
 800277e:	f200 80e1 	bhi.w	8002944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x34>
 8002786:	2b04      	cmp	r3, #4
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x3a>
 800278a:	e0db      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_GetSysClockFreq+0x204>)
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002790:	e0db      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_RCC_GetSysClockFreq+0x208>)
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002796:	e0d8      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d063      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
 80027c2:	2300      	movs	r3, #0
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
 80027c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ca:	4622      	mov	r2, r4
 80027cc:	462b      	mov	r3, r5
 80027ce:	f04f 0000 	mov.w	r0, #0
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	0159      	lsls	r1, r3, #5
 80027d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027dc:	0150      	lsls	r0, r2, #5
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4621      	mov	r1, r4
 80027e4:	1a51      	subs	r1, r2, r1
 80027e6:	6139      	str	r1, [r7, #16]
 80027e8:	4629      	mov	r1, r5
 80027ea:	eb63 0301 	sbc.w	r3, r3, r1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027fc:	4659      	mov	r1, fp
 80027fe:	018b      	lsls	r3, r1, #6
 8002800:	4651      	mov	r1, sl
 8002802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002806:	4651      	mov	r1, sl
 8002808:	018a      	lsls	r2, r1, #6
 800280a:	4651      	mov	r1, sl
 800280c:	ebb2 0801 	subs.w	r8, r2, r1
 8002810:	4659      	mov	r1, fp
 8002812:	eb63 0901 	sbc.w	r9, r3, r1
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	4623      	mov	r3, r4
 8002830:	eb18 0303 	adds.w	r3, r8, r3
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	462b      	mov	r3, r5
 8002838:	eb49 0303 	adc.w	r3, r9, r3
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800284a:	4629      	mov	r1, r5
 800284c:	024b      	lsls	r3, r1, #9
 800284e:	4621      	mov	r1, r4
 8002850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002854:	4621      	mov	r1, r4
 8002856:	024a      	lsls	r2, r1, #9
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285e:	2200      	movs	r2, #0
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
 8002862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002868:	f7fe f8ac 	bl	80009c4 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002874:	e058      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	2200      	movs	r2, #0
 800287e:	4618      	mov	r0, r3
 8002880:	4611      	mov	r1, r2
 8002882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0159      	lsls	r1, r3, #5
 800289e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a2:	0150      	lsls	r0, r2, #5
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4641      	mov	r1, r8
 80028aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028c8:	ebb2 040a 	subs.w	r4, r2, sl
 80028cc:	eb63 050b 	sbc.w	r5, r3, fp
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	464b      	mov	r3, r9
 80028ec:	eb45 0303 	adc.w	r3, r5, r3
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fe:	4629      	mov	r1, r5
 8002900:	028b      	lsls	r3, r1, #10
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002908:	4621      	mov	r1, r4
 800290a:	028a      	lsls	r2, r1, #10
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	61fa      	str	r2, [r7, #28]
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	f7fe f852 	bl	80009c4 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002942:	e002      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetSysClockFreq+0x204>)
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800294c:	4618      	mov	r0, r3
 800294e:	3750      	adds	r7, #80	; 0x50
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	08003f1c 	.word	0x08003f1c

080029a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029a8:	f7ff ffdc 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0b5b      	lsrs	r3, r3, #13
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	08003f1c 	.word	0x08003f1c

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e041      	b.n	8002a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fe54 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 fbda 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e041      	b.n	8002b00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f839 	bl	8002b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f000 fb8b 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_TIM_PWM_Start+0x24>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e022      	b.n	8002b86 <HAL_TIM_PWM_Start+0x6a>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d109      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x3e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	e015      	b.n	8002b86 <HAL_TIM_PWM_Start+0x6a>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d109      	bne.n	8002b74 <HAL_TIM_PWM_Start+0x58>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e008      	b.n	8002b86 <HAL_TIM_PWM_Start+0x6a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e068      	b.n	8002c60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x82>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9c:	e013      	b.n	8002bc6 <HAL_TIM_PWM_Start+0xaa>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PWM_Start+0x92>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bac:	e00b      	b.n	8002bc6 <HAL_TIM_PWM_Start+0xaa>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_PWM_Start+0xa2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bbc:	e003      	b.n	8002bc6 <HAL_TIM_PWM_Start+0xaa>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fd9e 	bl	8003710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <HAL_TIM_PWM_Start+0x14c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d107      	bne.n	8002bee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_TIM_PWM_Start+0x14c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d018      	beq.n	8002c2a <HAL_TIM_PWM_Start+0x10e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d013      	beq.n	8002c2a <HAL_TIM_PWM_Start+0x10e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_TIM_PWM_Start+0x150>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <HAL_TIM_PWM_Start+0x10e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <HAL_TIM_PWM_Start+0x154>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_TIM_PWM_Start+0x10e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_TIM_PWM_Start+0x158>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_TIM_PWM_Start+0x10e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_TIM_PWM_Start+0x15c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d111      	bne.n	8002c4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b06      	cmp	r3, #6
 8002c3a:	d010      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	e007      	b.n	8002c5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40014000 	.word	0x40014000

08002c7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_IC_Start_IT+0x1e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_IC_Start_IT+0x46>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_IC_Start_IT+0x2e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <HAL_TIM_IC_Start_IT+0x46>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_IC_Start_IT+0x3e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	e003      	b.n	8002cc2 <HAL_TIM_IC_Start_IT+0x46>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_IC_Start_IT+0x58>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e013      	b.n	8002cfc <HAL_TIM_IC_Start_IT+0x80>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d104      	bne.n	8002ce4 <HAL_TIM_IC_Start_IT+0x68>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e00b      	b.n	8002cfc <HAL_TIM_IC_Start_IT+0x80>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d104      	bne.n	8002cf4 <HAL_TIM_IC_Start_IT+0x78>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_IC_Start_IT+0x80>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cfe:	7bbb      	ldrb	r3, [r7, #14]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d102      	bne.n	8002d0a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d04:	7b7b      	ldrb	r3, [r7, #13]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c2      	b.n	8002e94 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_IC_Start_IT+0xa2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1c:	e013      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0xca>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_IC_Start_IT+0xb2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2c:	e00b      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0xca>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_IC_Start_IT+0xc2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d3c:	e003      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0xca>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0xda>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d54:	e013      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x102>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0xea>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d64:	e00b      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x102>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_IC_Start_IT+0xfa>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d74:	e003      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x102>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d841      	bhi.n	8002e08 <HAL_TIM_IC_Start_IT+0x18c>
 8002d84:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_TIM_IC_Start_IT+0x110>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002dc1 	.word	0x08002dc1
 8002d90:	08002e09 	.word	0x08002e09
 8002d94:	08002e09 	.word	0x08002e09
 8002d98:	08002e09 	.word	0x08002e09
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002e09 	.word	0x08002e09
 8002da4:	08002e09 	.word	0x08002e09
 8002da8:	08002e09 	.word	0x08002e09
 8002dac:	08002de5 	.word	0x08002de5
 8002db0:	08002e09 	.word	0x08002e09
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002e09 	.word	0x08002e09
 8002dbc:	08002df7 	.word	0x08002df7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0202 	orr.w	r2, r2, #2
 8002dce:	60da      	str	r2, [r3, #12]
      break;
 8002dd0:	e01d      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0204 	orr.w	r2, r2, #4
 8002de0:	60da      	str	r2, [r3, #12]
      break;
 8002de2:	e014      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0208 	orr.w	r2, r2, #8
 8002df2:	60da      	str	r2, [r3, #12]
      break;
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0210 	orr.w	r2, r2, #16
 8002e04:	60da      	str	r2, [r3, #12]
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13e      	bne.n	8002e92 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fc77 	bl	8003710 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_TIM_IC_Start_IT+0x220>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1e2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d013      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1e2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_TIM_IC_Start_IT+0x224>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1e2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_TIM_IC_Start_IT+0x228>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1e2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1e2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <HAL_TIM_IC_Start_IT+0x230>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d010      	beq.n	8002e92 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	e007      	b.n	8002e92 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40014000 	.word	0x40014000

08002eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0ae      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f200 809f 	bhi.w	800301c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	0800301d 	.word	0x0800301d
 8002eec:	0800301d 	.word	0x0800301d
 8002ef0:	0800301d 	.word	0x0800301d
 8002ef4:	08002f59 	.word	0x08002f59
 8002ef8:	0800301d 	.word	0x0800301d
 8002efc:	0800301d 	.word	0x0800301d
 8002f00:	0800301d 	.word	0x0800301d
 8002f04:	08002f9b 	.word	0x08002f9b
 8002f08:	0800301d 	.word	0x0800301d
 8002f0c:	0800301d 	.word	0x0800301d
 8002f10:	0800301d 	.word	0x0800301d
 8002f14:	08002fdb 	.word	0x08002fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f9d0 	bl	80032c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	619a      	str	r2, [r3, #24]
      break;
 8002f56:	e064      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa16 	bl	8003390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
      break;
 8002f98:	e043      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa61 	bl	8003468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0208 	orr.w	r2, r2, #8
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0204 	bic.w	r2, r2, #4
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	61da      	str	r2, [r3, #28]
      break;
 8002fd8:	e023      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 faab 	bl	800353c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69d9      	ldr	r1, [r3, #28]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	61da      	str	r2, [r3, #28]
      break;
 800301a:	e002      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
      break;
 8003020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIM_ConfigClockSource+0x1c>
 800304c:	2302      	movs	r3, #2
 800304e:	e0b4      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x186>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d03e      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0xd4>
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	f200 8087 	bhi.w	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	f000 8086 	beq.w	80031a6 <HAL_TIM_ConfigClockSource+0x172>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d87f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d01a      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xa6>
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d87b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d050      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x11a>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d877      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d03c      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xfa>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d873      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d058      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x13a>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d86f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d064      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d86b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d060      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d867      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d05a      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	e062      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f000 faf1 	bl	80036d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
      break;
 8003106:	e04f      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f000 fada 	bl	80036d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800312a:	609a      	str	r2, [r3, #8]
      break;
 800312c:	e03c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	f000 fa4e 	bl	80035dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2150      	movs	r1, #80	; 0x50
 8003146:	4618      	mov	r0, r3
 8003148:	f000 faa7 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800314c:	e02c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	461a      	mov	r2, r3
 800315c:	f000 fa6d 	bl	800363a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2160      	movs	r1, #96	; 0x60
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fa97 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800316c:	e01c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	461a      	mov	r2, r3
 800317c:	f000 fa2e 	bl	80035dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa87 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800318c:	e00c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f000 fa7e 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800319e:	e003      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e000      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <TIM_Base_SetConfig+0xe4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00f      	beq.n	80031fc <TIM_Base_SetConfig+0x38>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0x38>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a31      	ldr	r2, [pc, #196]	; (80032ac <TIM_Base_SetConfig+0xe8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0x38>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a30      	ldr	r2, [pc, #192]	; (80032b0 <TIM_Base_SetConfig+0xec>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0x38>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a2f      	ldr	r2, [pc, #188]	; (80032b4 <TIM_Base_SetConfig+0xf0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <TIM_Base_SetConfig+0xe4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01b      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d017      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <TIM_Base_SetConfig+0xe8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <TIM_Base_SetConfig+0xec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00f      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <TIM_Base_SetConfig+0xf0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <TIM_Base_SetConfig+0xf4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <TIM_Base_SetConfig+0xf8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_Base_SetConfig+0x8a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <TIM_Base_SetConfig+0xfc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a08      	ldr	r2, [pc, #32]	; (80032a8 <TIM_Base_SetConfig+0xe4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	615a      	str	r2, [r3, #20]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800

080032c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0201 	bic.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 0302 	bic.w	r3, r3, #2
 800330c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <TIM_OC1_SetConfig+0xc8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10c      	bne.n	800333a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0308 	bic.w	r3, r3, #8
 8003326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <TIM_OC1_SetConfig+0xc8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40010000 	.word	0x40010000

08003390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0210 	bic.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <TIM_OC2_SetConfig+0xd4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10d      	bne.n	800340c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a15      	ldr	r2, [pc, #84]	; (8003464 <TIM_OC2_SetConfig+0xd4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d113      	bne.n	800343c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40010000 	.word	0x40010000

08003468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <TIM_OC3_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <TIM_OC3_SetConfig+0xd0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d113      	bne.n	8003512 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	621a      	str	r2, [r3, #32]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40010000 	.word	0x40010000

0800353c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <TIM_OC4_SetConfig+0x9c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000

080035dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 030a 	bic.w	r3, r3, #10
 8003618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363a:	b480      	push	{r7}
 800363c:	b087      	sub	sp, #28
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0210 	bic.w	r2, r3, #16
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	031b      	lsls	r3, r3, #12
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f043 0307 	orr.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2201      	movs	r2, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e050      	b.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d013      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a16      	ldr	r2, [pc, #88]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10c      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40014000 	.word	0x40014000

08003838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003850:	2302      	movs	r3, #2
 8003852:	e03d      	b.n	80038d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03f      	b.n	800396e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fff0 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f829 	bl	8003978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b0c0      	sub	sp, #256	; 0x100
 800397e:	af00      	add	r7, sp, #0
 8003980:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	ea40 0301 	orr.w	r3, r0, r1
 80039a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039d0:	f021 010c 	bic.w	r1, r1, #12
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039de:	430b      	orrs	r3, r1
 80039e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	6999      	ldr	r1, [r3, #24]
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	ea40 0301 	orr.w	r3, r0, r1
 80039fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b8f      	ldr	r3, [pc, #572]	; (8003c44 <UART_SetConfig+0x2cc>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d005      	beq.n	8003a18 <UART_SetConfig+0xa0>
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b8d      	ldr	r3, [pc, #564]	; (8003c48 <UART_SetConfig+0x2d0>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d104      	bne.n	8003a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a18:	f7fe ffc4 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 8003a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a20:	e003      	b.n	8003a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a22:	f7fe ffab 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003a26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a34:	f040 810c 	bne.w	8003c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	1891      	adds	r1, r2, r2
 8003a50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a52:	415b      	adcs	r3, r3
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	eb12 0801 	adds.w	r8, r2, r1
 8003a60:	4629      	mov	r1, r5
 8003a62:	eb43 0901 	adc.w	r9, r3, r1
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7a:	4690      	mov	r8, r2
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	eb18 0303 	adds.w	r3, r8, r3
 8003a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a88:	462b      	mov	r3, r5
 8003a8a:	eb49 0303 	adc.w	r3, r9, r3
 8003a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	18db      	adds	r3, r3, r3
 8003aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8003aac:	4613      	mov	r3, r2
 8003aae:	eb42 0303 	adc.w	r3, r2, r3
 8003ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003abc:	f7fc ff82 	bl	80009c4 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4b61      	ldr	r3, [pc, #388]	; (8003c4c <UART_SetConfig+0x2d4>)
 8003ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	011c      	lsls	r4, r3, #4
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	1891      	adds	r1, r2, r2
 8003ae6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ae8:	415b      	adcs	r3, r3
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003af0:	4641      	mov	r1, r8
 8003af2:	eb12 0a01 	adds.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb43 0b01 	adc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b10:	4692      	mov	sl, r2
 8003b12:	469b      	mov	fp, r3
 8003b14:	4643      	mov	r3, r8
 8003b16:	eb1a 0303 	adds.w	r3, sl, r3
 8003b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	eb4b 0303 	adc.w	r3, fp, r3
 8003b24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	18db      	adds	r3, r3, r3
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
 8003b42:	4613      	mov	r3, r2
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b52:	f7fc ff37 	bl	80009c4 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <UART_SetConfig+0x2d4>)
 8003b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2264      	movs	r2, #100	; 0x64
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	1acb      	subs	r3, r1, r3
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <UART_SetConfig+0x2d4>)
 8003b74:	fba3 2302 	umull	r2, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b80:	441c      	add	r4, r3
 8003b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	1891      	adds	r1, r2, r2
 8003b9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b9c:	415b      	adcs	r3, r3
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	1851      	adds	r1, r2, r1
 8003ba8:	6339      	str	r1, [r7, #48]	; 0x30
 8003baa:	4649      	mov	r1, r9
 8003bac:	414b      	adcs	r3, r1
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	00cb      	lsls	r3, r1, #3
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	00ca      	lsls	r2, r1, #3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd8:	464b      	mov	r3, r9
 8003bda:	460a      	mov	r2, r1
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	18db      	adds	r3, r3, r3
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfe:	4613      	mov	r3, r2
 8003c00:	eb42 0303 	adc.w	r3, r2, r3
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c0e:	f7fc fed9 	bl	80009c4 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <UART_SetConfig+0x2d4>)
 8003c18:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	2164      	movs	r1, #100	; 0x64
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	3332      	adds	r3, #50	; 0x32
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <UART_SetConfig+0x2d4>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4422      	add	r2, r4
 8003c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c40:	e105      	b.n	8003e4e <UART_SetConfig+0x4d6>
 8003c42:	bf00      	nop
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	1891      	adds	r1, r2, r2
 8003c68:	6239      	str	r1, [r7, #32]
 8003c6a:	415b      	adcs	r3, r3
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c72:	4641      	mov	r1, r8
 8003c74:	1854      	adds	r4, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0501 	adc.w	r5, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	00eb      	lsls	r3, r5, #3
 8003c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8a:	00e2      	lsls	r2, r4, #3
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	461d      	mov	r5, r3
 8003c90:	4643      	mov	r3, r8
 8003c92:	18e3      	adds	r3, r4, r3
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c98:	464b      	mov	r3, r9
 8003c9a:	eb45 0303 	adc.w	r3, r5, r3
 8003c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	008b      	lsls	r3, r1, #2
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc8:	4621      	mov	r1, r4
 8003cca:	008a      	lsls	r2, r1, #2
 8003ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cd0:	f7fc fe78 	bl	80009c4 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4b60      	ldr	r3, [pc, #384]	; (8003e5c <UART_SetConfig+0x4e4>)
 8003cda:	fba3 2302 	umull	r2, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	011c      	lsls	r4, r3, #4
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	61b9      	str	r1, [r7, #24]
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d04:	4641      	mov	r1, r8
 8003d06:	1851      	adds	r1, r2, r1
 8003d08:	6139      	str	r1, [r7, #16]
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	00cb      	lsls	r3, r1, #3
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d26:	4651      	mov	r1, sl
 8003d28:	00ca      	lsls	r2, r1, #3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4642      	mov	r2, r8
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d38:	464b      	mov	r3, r9
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	008b      	lsls	r3, r1, #2
 8003d60:	4641      	mov	r1, r8
 8003d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d66:	4641      	mov	r1, r8
 8003d68:	008a      	lsls	r2, r1, #2
 8003d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d6e:	f7fc fe29 	bl	80009c4 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <UART_SetConfig+0x4e4>)
 8003d78:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	2164      	movs	r1, #100	; 0x64
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	3332      	adds	r3, #50	; 0x32
 8003d8a:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <UART_SetConfig+0x4e4>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d96:	441c      	add	r4, r3
 8003d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003da0:	677a      	str	r2, [r7, #116]	; 0x74
 8003da2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003da6:	4642      	mov	r2, r8
 8003da8:	464b      	mov	r3, r9
 8003daa:	1891      	adds	r1, r2, r2
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	415b      	adcs	r3, r3
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db6:	4641      	mov	r1, r8
 8003db8:	1851      	adds	r1, r2, r1
 8003dba:	6039      	str	r1, [r7, #0]
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	414b      	adcs	r3, r1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dce:	4659      	mov	r1, fp
 8003dd0:	00cb      	lsls	r3, r1, #3
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd8:	4651      	mov	r1, sl
 8003dda:	00ca      	lsls	r2, r1, #3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	4603      	mov	r3, r0
 8003de2:	4642      	mov	r2, r8
 8003de4:	189b      	adds	r3, r3, r2
 8003de6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de8:	464b      	mov	r3, r9
 8003dea:	460a      	mov	r2, r1
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8003dfc:	667a      	str	r2, [r7, #100]	; 0x64
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	008b      	lsls	r3, r1, #2
 8003e0e:	4641      	mov	r1, r8
 8003e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e14:	4641      	mov	r1, r8
 8003e16:	008a      	lsls	r2, r1, #2
 8003e18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e1c:	f7fc fdd2 	bl	80009c4 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <UART_SetConfig+0x4e4>)
 8003e26:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2164      	movs	r1, #100	; 0x64
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	; 0x32
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <UART_SetConfig+0x4e4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4422      	add	r2, r4
 8003e4c:	609a      	str	r2, [r3, #8]
}
 8003e4e:	bf00      	nop
 8003e50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	51eb851f 	.word	0x51eb851f

08003e60 <__libc_init_array>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	4d0d      	ldr	r5, [pc, #52]	; (8003e98 <__libc_init_array+0x38>)
 8003e64:	4c0d      	ldr	r4, [pc, #52]	; (8003e9c <__libc_init_array+0x3c>)
 8003e66:	1b64      	subs	r4, r4, r5
 8003e68:	10a4      	asrs	r4, r4, #2
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	42a6      	cmp	r6, r4
 8003e6e:	d109      	bne.n	8003e84 <__libc_init_array+0x24>
 8003e70:	4d0b      	ldr	r5, [pc, #44]	; (8003ea0 <__libc_init_array+0x40>)
 8003e72:	4c0c      	ldr	r4, [pc, #48]	; (8003ea4 <__libc_init_array+0x44>)
 8003e74:	f000 f82e 	bl	8003ed4 <_init>
 8003e78:	1b64      	subs	r4, r4, r5
 8003e7a:	10a4      	asrs	r4, r4, #2
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	42a6      	cmp	r6, r4
 8003e80:	d105      	bne.n	8003e8e <__libc_init_array+0x2e>
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e88:	4798      	blx	r3
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7ee      	b.n	8003e6c <__libc_init_array+0xc>
 8003e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e92:	4798      	blx	r3
 8003e94:	3601      	adds	r6, #1
 8003e96:	e7f2      	b.n	8003e7e <__libc_init_array+0x1e>
 8003e98:	08003f2c 	.word	0x08003f2c
 8003e9c:	08003f2c 	.word	0x08003f2c
 8003ea0:	08003f2c 	.word	0x08003f2c
 8003ea4:	08003f30 	.word	0x08003f30

08003ea8 <memcpy>:
 8003ea8:	440a      	add	r2, r1
 8003eaa:	4291      	cmp	r1, r2
 8003eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eb0:	d100      	bne.n	8003eb4 <memcpy+0xc>
 8003eb2:	4770      	bx	lr
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ebe:	4291      	cmp	r1, r2
 8003ec0:	d1f9      	bne.n	8003eb6 <memcpy+0xe>
 8003ec2:	bd10      	pop	{r4, pc}

08003ec4 <memset>:
 8003ec4:	4402      	add	r2, r0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d100      	bne.n	8003ece <memset+0xa>
 8003ecc:	4770      	bx	lr
 8003ece:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed2:	e7f9      	b.n	8003ec8 <memset+0x4>

08003ed4 <_init>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr

08003ee0 <_fini>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr
