
controlServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e4  080059e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ec  080059ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08005a64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005a64  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee7c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002221  00000000  00000000  0002ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00031140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00031dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017694  00000000  00000000  00032988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f575  00000000  00000000  0004a01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eeb9  00000000  00000000  00059591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e844a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a34  00000000  00000000  000e849c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005950 	.word	0x08005950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005950 	.word	0x08005950

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b974 	b.w	8000ecc <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468e      	mov	lr, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14d      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	d969      	bls.n	8000ce4 <__udivmoddi4+0xe8>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b152      	cbz	r2, 8000c2c <__udivmoddi4+0x30>
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	f1c2 0120 	rsb	r1, r2, #32
 8000c1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c26:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	0c21      	lsrs	r1, r4, #16
 8000c32:	fbbe f6f8 	udiv	r6, lr, r8
 8000c36:	fa1f f78c 	uxth.w	r7, ip
 8000c3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c42:	fb06 f107 	mul.w	r1, r6, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 811f 	bcs.w	8000e94 <__udivmoddi4+0x298>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 811c 	bls.w	8000e94 <__udivmoddi4+0x298>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 f707 	mul.w	r7, r0, r7
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x92>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c80:	f080 810a 	bcs.w	8000e98 <__udivmoddi4+0x29c>
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	f240 8107 	bls.w	8000e98 <__udivmoddi4+0x29c>
 8000c8a:	4464      	add	r4, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa4>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xc2>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f000 80ef 	beq.w	8000e8e <__udivmoddi4+0x292>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f683 	clz	r6, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d14a      	bne.n	8000d5c <__udivmoddi4+0x160>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd4>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80f9 	bhi.w	8000ec2 <__udivmoddi4+0x2c6>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa4>
 8000cde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xec>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 8092 	bne.w	8000e16 <__udivmoddi4+0x21a>
 8000cf2:	eba1 010c 	sub.w	r1, r1, ip
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	0c20      	lsrs	r0, r4, #16
 8000d02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d06:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0e:	fb0e f003 	mul.w	r0, lr, r3
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x12c>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x12a>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f200 80cb 	bhi.w	8000ebc <__udivmoddi4+0x2c0>
 8000d26:	4643      	mov	r3, r8
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d30:	fb07 1110 	mls	r1, r7, r0, r1
 8000d34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x156>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d48:	d202      	bcs.n	8000d50 <__udivmoddi4+0x154>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f200 80bb 	bhi.w	8000ec6 <__udivmoddi4+0x2ca>
 8000d50:	4608      	mov	r0, r1
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x9a>
 8000d5c:	f1c6 0720 	rsb	r7, r6, #32
 8000d60:	40b3      	lsls	r3, r6
 8000d62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d72:	431c      	orrs	r4, r3
 8000d74:	40f9      	lsrs	r1, r7
 8000d76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d82:	0c20      	lsrs	r0, r4, #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fb09 1118 	mls	r1, r9, r8, r1
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	4288      	cmp	r0, r1
 8000d96:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9a:	d90b      	bls.n	8000db4 <__udivmoddi4+0x1b8>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da4:	f080 8088 	bcs.w	8000eb8 <__udivmoddi4+0x2bc>
 8000da8:	4288      	cmp	r0, r1
 8000daa:	f240 8085 	bls.w	8000eb8 <__udivmoddi4+0x2bc>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x1e2>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd4:	d26c      	bcs.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dd6:	458e      	cmp	lr, r1
 8000dd8:	d96a      	bls.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de2:	fba0 9402 	umull	r9, r4, r0, r2
 8000de6:	eba1 010e 	sub.w	r1, r1, lr
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	46c8      	mov	r8, r9
 8000dee:	46a6      	mov	lr, r4
 8000df0:	d356      	bcc.n	8000ea0 <__udivmoddi4+0x2a4>
 8000df2:	d053      	beq.n	8000e9c <__udivmoddi4+0x2a0>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x212>
 8000df6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000e02:	fa22 f306 	lsr.w	r3, r2, r6
 8000e06:	40f1      	lsrs	r1, r6
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	f1c2 0320 	rsb	r3, r2, #32
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4301      	orrs	r1, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e34:	fb07 3610 	mls	r6, r7, r0, r3
 8000e38:	0c0b      	lsrs	r3, r1, #16
 8000e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e42:	429e      	cmp	r6, r3
 8000e44:	fa04 f402 	lsl.w	r4, r4, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x260>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e52:	d22f      	bcs.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d92d      	bls.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	b289      	uxth	r1, r1
 8000e60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e64:	fb07 3316 	mls	r3, r7, r6, r3
 8000e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x28a>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e7c:	d216      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d914      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e82:	3e02      	subs	r6, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e8c:	e738      	b.n	8000d00 <__udivmoddi4+0x104>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e705      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e3      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6f8      	b.n	8000c8e <__udivmoddi4+0x92>
 8000e9c:	454b      	cmp	r3, r9
 8000e9e:	d2a9      	bcs.n	8000df4 <__udivmoddi4+0x1f8>
 8000ea0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7a3      	b.n	8000df4 <__udivmoddi4+0x1f8>
 8000eac:	4646      	mov	r6, r8
 8000eae:	e7ea      	b.n	8000e86 <__udivmoddi4+0x28a>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	e794      	b.n	8000dde <__udivmoddi4+0x1e2>
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	e7d1      	b.n	8000e5c <__udivmoddi4+0x260>
 8000eb8:	46d0      	mov	r8, sl
 8000eba:	e77b      	b.n	8000db4 <__udivmoddi4+0x1b8>
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e732      	b.n	8000d28 <__udivmoddi4+0x12c>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e709      	b.n	8000cda <__udivmoddi4+0xde>
 8000ec6:	4464      	add	r4, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e742      	b.n	8000d52 <__udivmoddi4+0x156>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a36      	ldr	r2, [pc, #216]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <MX_GPIO_Init+0x114>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Mandador_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2122      	movs	r1, #34	; 0x22
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0x118>)
 8000f5c:	f001 fc0a 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f66:	4821      	ldr	r0, [pc, #132]	; (8000fec <MX_GPIO_Init+0x11c>)
 8000f68:	f001 fc04 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <MX_GPIO_Init+0x120>)
 8000f84:	f001 fa5a 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RecibidorUnPeso_Pin|RecibidorDosPesos_Pin|RecibidorCincoPesos_Pin|RecibidorDiezPesos_Pin;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <MX_GPIO_Init+0x120>)
 8000f9c:	f001 fa4e 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA5 */
  GPIO_InitStruct.Pin = Mandador_Pin|GPIO_PIN_5;
 8000fa0:	2322      	movs	r3, #34	; 0x22
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_GPIO_Init+0x118>)
 8000fb8:	f001 fa40 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8000fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_GPIO_Init+0x11c>)
 8000fd6:	f001 fa31 	bl	800243c <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <HAL_TIM_IC_CaptureCallback>:
uint32_t t_time = 0;
uint16_t dist = 0;
uint8_t flag_captured = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7f1b      	ldrb	r3, [r3, #28]
 8001004:	2b01      	cmp	r3, #1
 8001006:	f040 8083 	bne.w	8001110 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if(flag_captured == 0)
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x128>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d11a      	bne.n	8001048 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			t_ini = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f002 fe4f 	bl	8003cb8 <HAL_TIM_ReadCapturedValue>
 800101a:	4603      	mov	r3, r0
 800101c:	4a41      	ldr	r2, [pc, #260]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800101e:	6013      	str	r3, [r2, #0]
			flag_captured = 1;
 8001020:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020a 	bic.w	r2, r2, #10
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0202 	orr.w	r2, r2, #2
 8001044:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
		}
	}
}
 8001046:	e063      	b.n	8001110 <HAL_TIM_IC_CaptureCallback+0x118>
		else if(flag_captured == 1)
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x128>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d15f      	bne.n	8001110 <HAL_TIM_IC_CaptureCallback+0x118>
			t_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f002 fe30 	bl	8003cb8 <HAL_TIM_ReadCapturedValue>
 8001058:	4603      	mov	r3, r0
 800105a:	4a33      	ldr	r2, [pc, #204]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x130>)
 800105c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SetCounter(htim, 0);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
			if(t_end > t_ini){
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d907      	bls.n	8001082 <HAL_TIM_IC_CaptureCallback+0x8a>
				t_time = t_end - t_ini;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_TIM_IC_CaptureCallback+0x134>)
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e00f      	b.n	80010a2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if(t_ini > t_end){
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d909      	bls.n	80010a2 <HAL_TIM_IC_CaptureCallback+0xaa>
				t_time = (0xFFFF - t_ini) + t_end;
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800109c:	33ff      	adds	r3, #255	; 0xff
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_TIM_IC_CaptureCallback+0x134>)
 80010a0:	6013      	str	r3, [r2, #0]
			dist = (uint16_t)((t_time*0.034)/2);
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_TIM_IC_CaptureCallback+0x134>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa34 	bl	8000514 <__aeabi_ui2d>
 80010ac:	a31a      	add	r3, pc, #104	; (adr r3, 8001118 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff faa9 	bl	8000608 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c6:	f7ff fbc9 	bl	800085c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd5b 	bl	8000b8c <__aeabi_d2uiz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010dc:	801a      	strh	r2, [r3, #0]
			flag_captured = 0;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 020a 	bic.w	r2, r2, #10
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a12      	ldr	r2, [r2, #32]
 80010fe:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0202 	bic.w	r2, r2, #2
 800110e:	60da      	str	r2, [r3, #12]
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	b020c49c 	.word	0xb020c49c
 800111c:	3fa16872 	.word	0x3fa16872
 8001120:	2000009a 	.word	0x2000009a
 8001124:	2000008c 	.word	0x2000008c
 8001128:	20000090 	.word	0x20000090
 800112c:	20000094 	.word	0x20000094
 8001130:	20000098 	.word	0x20000098
 8001134:	2000017c 	.word	0x2000017c

08001138 <HCSR04_Init>:

void HCSR04_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <HCSR04_Init+0x1c>)
 8001144:	f001 fb16 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001148:	2100      	movs	r1, #0
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <HCSR04_Init+0x20>)
 800114c:	f002 f96c 	bl	8003428 <HAL_TIM_IC_Start_IT>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020400 	.word	0x40020400
 8001158:	2000017c 	.word	0x2000017c

0800115c <HCSR04_Get_Distance>:

uint16_t HCSR04_Get_Distance(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001166:	480f      	ldr	r0, [pc, #60]	; (80011a4 <HCSR04_Get_Distance+0x48>)
 8001168:	f001 fb04 	bl	8002774 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCounter(&htim5, 0);
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HCSR04_Get_Distance+0x4c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim5) < 10);
 8001174:	bf00      	nop
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HCSR04_Get_Distance+0x4c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	2b09      	cmp	r3, #9
 800117e:	d9fa      	bls.n	8001176 <HCSR04_Get_Distance+0x1a>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <HCSR04_Get_Distance+0x48>)
 8001188:	f001 faf4 	bl	8002774 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HCSR04_Get_Distance+0x4c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HCSR04_Get_Distance+0x4c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0202 	orr.w	r2, r2, #2
 800119a:	60da      	str	r2, [r3, #12]
	return dist;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HCSR04_Get_Distance+0x50>)
 800119e:	881b      	ldrh	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020400 	.word	0x40020400
 80011a8:	2000017c 	.word	0x2000017c
 80011ac:	20000098 	.word	0x20000098

080011b0 <servoEnGrados>:
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
	int servoEnGrados(int grados){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
		int gradosParaPlaca=(ceil((grados*11.111)+500));
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff f9bb 	bl	8000534 <__aeabi_i2d>
 80011be:	a313      	add	r3, pc, #76	; (adr r3, 800120c <servoEnGrados+0x5c>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fa20 	bl	8000608 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <servoEnGrados+0x58>)
 80011d6:	f7ff f861 	bl	800029c <__adddf3>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	ec43 2b17 	vmov	d7, r2, r3
 80011e2:	eeb0 0a47 	vmov.f32	s0, s14
 80011e6:	eef0 0a67 	vmov.f32	s1, s15
 80011ea:	f004 fb2d 	bl	8005848 <ceil>
 80011ee:	ec53 2b10 	vmov	r2, r3, d0
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fca1 	bl	8000b3c <__aeabi_d2iz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
		return gradosParaPlaca;
 80011fe:	68fb      	ldr	r3, [r7, #12]
	}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	407f4000 	.word	0x407f4000
 800120c:	fdf3b646 	.word	0xfdf3b646
 8001210:	402638d4 	.word	0x402638d4

08001214 <cicloFor>:

	int cicloFor(TIM_HandleTypeDef servoMotor){
 8001214:	b084      	sub	sp, #16
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	f107 0c10 	add.w	ip, r7, #16
 8001220:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		int detector=0;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
		for(int i=0;i<51;i++){
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	e013      	b.n	8001256 <cicloFor+0x42>
			servoMotor.Instance->CCR1=servoEnGrados(i);
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff ffbe 	bl	80011b0 <servoEnGrados>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
			if(HCSR04_Get_Distance()<9){
 800123a:	f7ff ff8f 	bl	800115c <HCSR04_Get_Distance>
 800123e:	4603      	mov	r3, r0
 8001240:	2b08      	cmp	r3, #8
 8001242:	d802      	bhi.n	800124a <cicloFor+0x36>
				detector+=1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
			}
			HAL_Delay(40);
 800124a:	2028      	movs	r0, #40	; 0x28
 800124c:	f000 ffc0 	bl	80021d0 <HAL_Delay>
		for(int i=0;i<51;i++){
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b32      	cmp	r3, #50	; 0x32
 800125a:	dde8      	ble.n	800122e <cicloFor+0x1a>
		}
		return detector;
 800125c:	687b      	ldr	r3, [r7, #4]
	}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001268:	b004      	add	sp, #16
 800126a:	4770      	bx	lr

0800126c <setBothServos>:

	void setBothServos(TIM_HandleTypeDef servoMotor1,int gradosServoMotor1,TIM_HandleTypeDef servoMotor2,int gradosServoMotor2){
 800126c:	b084      	sub	sp, #16
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
 8001272:	f107 0c08 	add.w	ip, r7, #8
 8001276:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		servoMotor1.Instance->CCR1=servoEnGrados(gradosServoMotor1);
 800127a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800127c:	f7ff ff98 	bl	80011b0 <servoEnGrados>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
		servoMotor2.Instance->CCR1=servoEnGrados(gradosServoMotor2);
 8001286:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800128a:	f7ff ff91 	bl	80011b0 <servoEnGrados>
 800128e:	4602      	mov	r2, r0
 8001290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800129c:	b004      	add	sp, #16
 800129e:	4770      	bx	lr

080012a0 <concatenar>:

	void concatenar(int pagar, int pagado, char* tipoVehi){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
		char resultado[50];

		sprintf(resultado, "%d,%d,%s", pagar, pagado, tipoVehi);
 80012ac:	f107 0014 	add.w	r0, r7, #20
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4906      	ldr	r1, [pc, #24]	; (80012d4 <concatenar+0x34>)
 80012ba:	f003 fe29 	bl	8004f10 <siprintf>

		rprintf("%s\n",resultado);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <concatenar+0x38>)
 80012c6:	f000 fa43 	bl	8001750 <rprintf>
	}
 80012ca:	bf00      	nop
 80012cc:	3748      	adds	r7, #72	; 0x48
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08005968 	.word	0x08005968
 80012d8:	08005974 	.word	0x08005974

080012dc <pagar>:

	int pagar(int pagar,char* vehic){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

		int pagado=0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
		while(pagar>pagado){
 80012ea:	e03b      	b.n	8001364 <pagar+0x88>
			if(HAL_GPIO_ReadPin(RecibidorUnPeso_GPIO_Port, RecibidorUnPeso_Pin)==0){
 80012ec:	2101      	movs	r1, #1
 80012ee:	4822      	ldr	r0, [pc, #136]	; (8001378 <pagar+0x9c>)
 80012f0:	f001 fa28 	bl	8002744 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <pagar+0x2a>
				pagado+=1;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	f000 ff65 	bl	80021d0 <HAL_Delay>
			}
			if(HAL_GPIO_ReadPin(RecibidorDosPesos_GPIO_Port, RecibidorDosPesos_Pin)==0){
 8001306:	2102      	movs	r1, #2
 8001308:	481b      	ldr	r0, [pc, #108]	; (8001378 <pagar+0x9c>)
 800130a:	f001 fa1b 	bl	8002744 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <pagar+0x44>
				pagado+=2;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3302      	adds	r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 800131a:	2064      	movs	r0, #100	; 0x64
 800131c:	f000 ff58 	bl	80021d0 <HAL_Delay>
			}
			if(HAL_GPIO_ReadPin(RecibidorCincoPesos_GPIO_Port, RecibidorCincoPesos_Pin)==0){
 8001320:	2104      	movs	r1, #4
 8001322:	4815      	ldr	r0, [pc, #84]	; (8001378 <pagar+0x9c>)
 8001324:	f001 fa0e 	bl	8002744 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <pagar+0x5e>
				pagado+=5;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3305      	adds	r3, #5
 8001332:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f000 ff4b 	bl	80021d0 <HAL_Delay>
			}
			if(HAL_GPIO_ReadPin(RecibidorDiezPesos_GPIO_Port,RecibidorDiezPesos_Pin)==0){
 800133a:	2108      	movs	r1, #8
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <pagar+0x9c>)
 800133e:	f001 fa01 	bl	8002744 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <pagar+0x78>
				pagado+=10;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	330a      	adds	r3, #10
 800134c:	60fb      	str	r3, [r7, #12]
				HAL_Delay(100);
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f000 ff3e 	bl	80021d0 <HAL_Delay>
			}
			concatenar(pagar,pagado,vehic);
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffa1 	bl	80012a0 <concatenar>
			HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f000 ff36 	bl	80021d0 <HAL_Delay>
		while(pagar>pagado){
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	dcbf      	bgt.n	80012ec <pagar+0x10>
		}
		return pagado;
 800136c:	68fb      	ldr	r3, [r7, #12]
	}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020800 	.word	0x40020800

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b5b0      	push	{r4, r5, r7, lr}
 800137e:	b0e0      	sub	sp, #384	; 0x180
 8001380:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001382:	f000 feb3 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f94f 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f7ff fda1 	bl	8000ed0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800138e:	f000 fdb1 	bl	8001ef4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001392:	f000 faa9 	bl	80018e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001396:	f000 fb49 	bl	8001a2c <MX_TIM2_Init>
  MX_TIM3_Init();
 800139a:	f000 fbbd 	bl	8001b18 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800139e:	f000 fdd3 	bl	8001f48 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80013a2:	f000 fc31 	bl	8001c08 <MX_TIM5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MX_TIM1_Init();
 80013a6:	f000 fa9f 	bl	80018e8 <MX_TIM1_Init>
  HCSR04_Init();
 80013aa:	f7ff fec5 	bl	8001138 <HCSR04_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4895      	ldr	r0, [pc, #596]	; (8001608 <main+0x28c>)
 80013b2:	f001 ff39 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4894      	ldr	r0, [pc, #592]	; (800160c <main+0x290>)
 80013ba:	f001 ff35 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80013be:	2100      	movs	r1, #0
 80013c0:	4893      	ldr	r0, [pc, #588]	; (8001610 <main+0x294>)
 80013c2:	f001 ff31 	bl	8003228 <HAL_TIM_PWM_Start>

  //Para el servo de la pluma
  TIM_HandleTypeDef servoPluma=htim1;
 80013c6:	4a90      	ldr	r2, [pc, #576]	; (8001608 <main+0x28c>)
 80013c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013cc:	4611      	mov	r1, r2
 80013ce:	2248      	movs	r2, #72	; 0x48
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fd87 	bl	8004ee4 <memcpy>

  //Para el servo que detecta el vehiculo
  TIM_HandleTypeDef servoMotorDetector=htim2;
 80013d6:	4a8d      	ldr	r2, [pc, #564]	; (800160c <main+0x290>)
 80013d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013dc:	4611      	mov	r1, r2
 80013de:	2248      	movs	r2, #72	; 0x48
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 fd7f 	bl	8004ee4 <memcpy>
  //Para el servo que baja el sensor
  TIM_HandleTypeDef servoMotorBajador=htim3;
 80013e6:	4a8a      	ldr	r2, [pc, #552]	; (8001610 <main+0x294>)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4611      	mov	r1, r2
 80013ec:	2248      	movs	r2, #72	; 0x48
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fd78 	bl	8004ee4 <memcpy>
  int detectarVehiculo=0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  int moto=12;
 80013fa:	230c      	movs	r3, #12
 80013fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  int carro=17;
 8001400:	2311      	movs	r3, #17
 8001402:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  int camion=30;
 8001406:	231e      	movs	r3, #30
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  int pay;
  int paid;

  int entrar=0;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  char* tipoVehiculo;
  Initrdebug(&huart6);
 8001412:	4880      	ldr	r0, [pc, #512]	; (8001614 <main+0x298>)
 8001414:	f000 f976 	bl	8001704 <Initrdebug>
  while (1)
  {
	  setBothServos(servoMotorDetector, 10, servoMotorBajador, 0);
 8001418:	2300      	movs	r3, #0
 800141a:	9321      	str	r3, [sp, #132]	; 0x84
 800141c:	a80f      	add	r0, sp, #60	; 0x3c
 800141e:	463b      	mov	r3, r7
 8001420:	2248      	movs	r2, #72	; 0x48
 8001422:	4619      	mov	r1, r3
 8001424:	f003 fd5e 	bl	8004ee4 <memcpy>
 8001428:	230a      	movs	r3, #10
 800142a:	930e      	str	r3, [sp, #56]	; 0x38
 800142c:	466d      	mov	r5, sp
 800142e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001442:	e885 0003 	stmia.w	r5, {r0, r1}
 8001446:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	f7ff ff0e 	bl	800126c <setBothServos>
	  while(HCSR04_Get_Distance()>5);
 8001450:	bf00      	nop
 8001452:	f7ff fe83 	bl	800115c <HCSR04_Get_Distance>
 8001456:	4603      	mov	r3, r0
 8001458:	2b05      	cmp	r3, #5
 800145a:	d8fa      	bhi.n	8001452 <main+0xd6>
	  HAL_Delay(1000);
 800145c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001460:	f000 feb6 	bl	80021d0 <HAL_Delay>

	  detectarVehiculo=0;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  HAL_GPIO_WritePin(Mandador_GPIO_Port, Mandador_Pin, 1);
 800146a:	2201      	movs	r2, #1
 800146c:	2102      	movs	r1, #2
 800146e:	486a      	ldr	r0, [pc, #424]	; (8001618 <main+0x29c>)
 8001470:	f001 f980 	bl	8002774 <HAL_GPIO_WritePin>
	  setBothServos(servoMotorDetector, 10, servoMotorBajador, 60);
 8001474:	233c      	movs	r3, #60	; 0x3c
 8001476:	9321      	str	r3, [sp, #132]	; 0x84
 8001478:	a80f      	add	r0, sp, #60	; 0x3c
 800147a:	463b      	mov	r3, r7
 800147c:	2248      	movs	r2, #72	; 0x48
 800147e:	4619      	mov	r1, r3
 8001480:	f003 fd30 	bl	8004ee4 <memcpy>
 8001484:	230a      	movs	r3, #10
 8001486:	930e      	str	r3, [sp, #56]	; 0x38
 8001488:	466d      	mov	r5, sp
 800148a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149e:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a8:	f7ff fee0 	bl	800126c <setBothServos>
	  detectarVehiculo=cicloFor(servoMotorDetector);
 80014ac:	466d      	mov	r5, sp
 80014ae:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014cc:	f7ff fea2 	bl	8001214 <cicloFor>
 80014d0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	  if(detectarVehiculo>3){
 80014d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80014d8:	2b03      	cmp	r3, #3
 80014da:	dd0d      	ble.n	80014f8 <main+0x17c>
		  //Significa que es camion
		  tipoVehiculo="Camion";
 80014dc:	4b4f      	ldr	r3, [pc, #316]	; (800161c <main+0x2a0>)
 80014de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  pay=camion;
 80014e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80014e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  entrar=1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		  HAL_Delay(100);
 80014f0:	2064      	movs	r0, #100	; 0x64
 80014f2:	f000 fe6d 	bl	80021d0 <HAL_Delay>
 80014f6:	e052      	b.n	800159e <main+0x222>
	  }else{
		  setBothServos(servoMotorDetector, 10, servoMotorBajador, 0);
 80014f8:	2300      	movs	r3, #0
 80014fa:	9321      	str	r3, [sp, #132]	; 0x84
 80014fc:	a80f      	add	r0, sp, #60	; 0x3c
 80014fe:	463b      	mov	r3, r7
 8001500:	2248      	movs	r2, #72	; 0x48
 8001502:	4619      	mov	r1, r3
 8001504:	f003 fcee 	bl	8004ee4 <memcpy>
 8001508:	230a      	movs	r3, #10
 800150a:	930e      	str	r3, [sp, #56]	; 0x38
 800150c:	466d      	mov	r5, sp
 800150e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001522:	e885 0003 	stmia.w	r5, {r0, r1}
 8001526:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800152a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152c:	f7ff fe9e 	bl	800126c <setBothServos>
	  	  detectarVehiculo=cicloFor(servoMotorDetector);
 8001530:	466d      	mov	r5, sp
 8001532:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001546:	e885 0003 	stmia.w	r5, {r0, r1}
 800154a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001550:	f7ff fe60 	bl	8001214 <cicloFor>
 8001554:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	  	  if(detectarVehiculo>10){
 8001558:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800155c:	2b0a      	cmp	r3, #10
 800155e:	dd0d      	ble.n	800157c <main+0x200>
	  		  //tipoVehiculo='A';
	  		  tipoVehiculo="Automovil";
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <main+0x2a4>)
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  		  entrar=1;
 8001566:	2301      	movs	r3, #1
 8001568:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  		  pay=carro;
 800156c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  		  HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f000 fe2b 	bl	80021d0 <HAL_Delay>
 800157a:	e010      	b.n	800159e <main+0x222>
	  	  }else if(detectarVehiculo>0){
 800157c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001580:	2b00      	cmp	r3, #0
 8001582:	dd0c      	ble.n	800159e <main+0x222>
	  		  //tipoVehiculo='M';
	  		  tipoVehiculo="Motocicleta";
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <main+0x2a8>)
 8001586:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  		  entrar=1;
 800158a:	2301      	movs	r3, #1
 800158c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  		  pay=moto;
 8001590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001594:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  		  HAL_Delay(100);
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	f000 fe19 	bl	80021d0 <HAL_Delay>
	  	  }
	  }
	  if(entrar==1){
 800159e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d121      	bne.n	80015ea <main+0x26e>
		  paid=pagar(pay,tipoVehiculo);
 80015a6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80015aa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80015ae:	f7ff fe95 	bl	80012dc <pagar>
 80015b2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		  concatenar(pay,paid,tipoVehiculo);
 80015b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015ba:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80015be:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80015c2:	f7ff fe6d 	bl	80012a0 <concatenar>
		  servoPluma.Instance->CCR1=servoEnGrados(0);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fdf2 	bl	80011b0 <servoEnGrados>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(10000);
 80015d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80015d8:	f000 fdfa 	bl	80021d0 <HAL_Delay>
		  servoPluma.Instance->CCR1=servoEnGrados(90);
 80015dc:	205a      	movs	r0, #90	; 0x5a
 80015de:	f7ff fde7 	bl	80011b0 <servoEnGrados>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  servoPluma.Instance->CCR1=servoEnGrados(90);
 80015ea:	205a      	movs	r0, #90	; 0x5a
 80015ec:	f7ff fde0 	bl	80011b0 <servoEnGrados>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(500);
 80015f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fc:	f000 fde8 	bl	80021d0 <HAL_Delay>
	  entrar=0;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  setBothServos(servoMotorDetector, 10, servoMotorBajador, 0);
 8001606:	e707      	b.n	8001418 <main+0x9c>
 8001608:	200000a4 	.word	0x200000a4
 800160c:	200000ec 	.word	0x200000ec
 8001610:	20000134 	.word	0x20000134
 8001614:	20000208 	.word	0x20000208
 8001618:	40020000 	.word	0x40020000
 800161c:	08005978 	.word	0x08005978
 8001620:	08005980 	.word	0x08005980
 8001624:	0800598c 	.word	0x0800598c

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	; 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2230      	movs	r2, #48	; 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fc62 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <SystemClock_Config+0xc8>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <SystemClock_Config+0xc8>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <SystemClock_Config+0xc8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <SystemClock_Config+0xcc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <SystemClock_Config+0xcc>)
 8001672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <SystemClock_Config+0xcc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001688:	2301      	movs	r3, #1
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168c:	2310      	movs	r3, #16
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	2302      	movs	r3, #2
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001694:	2300      	movs	r3, #0
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001698:	2308      	movs	r3, #8
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800169c:	2348      	movs	r3, #72	; 0x48
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a4:	2304      	movs	r3, #4
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 f87b 	bl	80027a8 <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016b8:	f000 f81e 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2302      	movs	r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2102      	movs	r1, #2
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fadd 	bl	8002c98 <HAL_RCC_ClockConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016e4:	f000 f808 	bl	80016f8 <Error_Handler>
  }
}
 80016e8:	bf00      	nop
 80016ea:	3750      	adds	r7, #80	; 0x50
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <Initrdebug>:
#include "stdlib.h"


UART_HandleTypeDef *huartx;

void Initrdebug(UART_HandleTypeDef *_huartx){
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	huartx = _huartx;
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <Initrdebug+0x1c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000009c 	.word	0x2000009c

08001724 <transmit>:

void transmit(const char* buffer){
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huartx, (uint8_t*)buffer, strlen(buffer), 100);
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <transmit+0x28>)
 800172e:	681c      	ldr	r4, [r3, #0]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7fe fd55 	bl	80001e0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4620      	mov	r0, r4
 8001740:	f003 f831 	bl	80047a6 <HAL_UART_Transmit>
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	2000009c 	.word	0x2000009c

08001750 <rprintf>:

void rprintf(const char* format,...){
 8001750:	b40f      	push	{r0, r1, r2, r3}
 8001752:	b580      	push	{r7, lr}
 8001754:	b0c2      	sub	sp, #264	; 0x108
 8001756:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args,format);
 8001758:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800175c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	char buffer[256];
	vsnprintf(buffer,sizeof(buffer),format,args);
 8001760:	1d38      	adds	r0, r7, #4
 8001762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001766:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	f003 fc1b 	bl	8004fa8 <vsniprintf>
	buffer[strlen((char*)buffer)] = '\0';
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fd33 	bl	80001e0 <strlen>
 800177a:	4602      	mov	r2, r0
 800177c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]
	va_end(args);
	transmit(buffer);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ffca 	bl	8001724 <transmit>
}
 8001790:	bf00      	nop
 8001792:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001796:	46bd      	mov	sp, r7
 8001798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800179c:	b004      	add	sp, #16
 800179e:	4770      	bx	lr

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_MspInit+0x4c>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_MspInit+0x4c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017de:	2007      	movs	r0, #7
 80017e0:	f000 fdea 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 fca8 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM5_IRQHandler+0x10>)
 800184a:	f001 ff07 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000017c 	.word	0x2000017c

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f003 fb02 	bl	8004e90 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020000 	.word	0x20020000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	200000a0 	.word	0x200000a0
 80018c0:	20000260 	.word	0x20000260

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b096      	sub	sp, #88	; 0x58
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2220      	movs	r2, #32
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f003 faed 	bl	8004f00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001928:	4a3f      	ldr	r2, [pc, #252]	; (8001a28 <MX_TIM1_Init+0x140>)
 800192a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <MX_TIM1_Init+0x13c>)
 800192e:	2247      	movs	r2, #71	; 0x47
 8001930:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <MX_TIM1_Init+0x13c>)
 800193a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800193e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <MX_TIM1_Init+0x13c>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001952:	4834      	ldr	r0, [pc, #208]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001954:	f001 fbc0 	bl	80030d8 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800195e:	f7ff fecb 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800196c:	4619      	mov	r1, r3
 800196e:	482d      	ldr	r0, [pc, #180]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001970:	f002 f8da 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800197a:	f7ff febd 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197e:	4829      	ldr	r0, [pc, #164]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001980:	f001 fbf9 	bl	8003176 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800198a:	f7ff feb5 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199a:	4619      	mov	r1, r3
 800199c:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_TIM1_Init+0x13c>)
 800199e:	f002 fde1 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019a8:	f7ff fea6 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80019b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <MX_TIM1_Init+0x13c>)
 80019d4:	f001 ffe6 	bl	80039a4 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80019de:	f7ff fe8b 	bl	80016f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001a06:	f002 fe1b 	bl	8004640 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001a10:	f7ff fe72 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM1_Init+0x13c>)
 8001a16:	f000 f9e7 	bl	8001de8 <HAL_TIM_MspPostInit>

}
 8001a1a:	bf00      	nop
 8001a1c:	3758      	adds	r7, #88	; 0x58
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200000a4 	.word	0x200000a4
 8001a28:	40010000 	.word	0x40010000

08001a2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08e      	sub	sp, #56	; 0x38
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a66:	2247      	movs	r2, #71	; 0x47
 8001a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a72:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a84:	4823      	ldr	r0, [pc, #140]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001a86:	f001 fb27 	bl	80030d8 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a90:	f7ff fe32 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	481c      	ldr	r0, [pc, #112]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001aa2:	f002 f841 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001aac:	f7ff fe24 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ab0:	4818      	ldr	r0, [pc, #96]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001ab2:	f001 fb60 	bl	8003176 <HAL_TIM_PWM_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001abc:	f7ff fe1c 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4619      	mov	r1, r3
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001ad0:	f002 fd48 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ada:	f7ff fe0d 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ade:	2360      	movs	r3, #96	; 0x60
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001ae2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001af8:	f001 ff54 	bl	80039a4 <HAL_TIM_PWM_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b02:	f7ff fdf9 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <MX_TIM2_Init+0xe8>)
 8001b08:	f000 f96e 	bl	8001de8 <HAL_TIM_MspPostInit>

}
 8001b0c:	bf00      	nop
 8001b0e:	3738      	adds	r7, #56	; 0x38
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000ec 	.word	0x200000ec

08001b18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	; 0x38
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b4a:	4a2e      	ldr	r2, [pc, #184]	; (8001c04 <MX_TIM3_Init+0xec>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b50:	2247      	movs	r2, #71	; 0x47
 8001b52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b5c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b6e:	4824      	ldr	r0, [pc, #144]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b70:	f001 fab2 	bl	80030d8 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b7a:	f7ff fdbd 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481d      	ldr	r0, [pc, #116]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b8c:	f001 ffcc 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b96:	f7ff fdaf 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b9a:	4819      	ldr	r0, [pc, #100]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001b9c:	f001 faeb 	bl	8003176 <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ba6:	f7ff fda7 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001bba:	f002 fcd3 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001bc4:	f7ff fd98 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	; 0x60
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001bcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001be2:	f001 fedf 	bl	80039a4 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bec:	f7ff fd84 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM3_Init+0xe8>)
 8001bf2:	f000 f8f9 	bl	8001de8 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3738      	adds	r7, #56	; 0x38
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000134 	.word	0x20000134
 8001c04:	40000400 	.word	0x40000400

08001c08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <MX_TIM5_Init+0xa4>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c2c:	2247      	movs	r2, #71	; 0x47
 8001c2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001c4a:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c4c:	f001 fb9c 	bl	8003388 <HAL_TIM_IC_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001c56:	f7ff fd4f 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4619      	mov	r1, r3
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c6a:	f002 fc7b 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c74:	f7ff fd40 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <MX_TIM5_Init+0xa0>)
 8001c90:	f001 fdec 	bl	800386c <HAL_TIM_IC_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001c9a:	f7ff fd2d 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000017c 	.word	0x2000017c
 8001cac:	40000c00 	.word	0x40000c00

08001cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_TIM_Base_MspInit+0x8c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cde:	e026      	b.n	8001d2e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
}
 8001d06:	e012      	b.n	8001d2e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_TIM_Base_MspInit+0x94>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10d      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <HAL_TIM_Base_MspInit+0x90>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40000400 	.word	0x40000400

08001d48 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_TIM_IC_MspInit+0x94>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d133      	bne.n	8001dd2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_TIM_IC_MspInit+0x98>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_TIM_IC_MspInit+0x98>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_TIM_IC_MspInit+0x98>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_TIM_IC_MspInit+0x98>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_TIM_IC_MspInit+0x98>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_TIM_IC_MspInit+0x98>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001db2:	2302      	movs	r3, #2
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_TIM_IC_MspInit+0x9c>)
 8001dbe:	f000 fb3d 	bl	800243c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2032      	movs	r0, #50	; 0x32
 8001dc8:	f000 fb01 	bl	80023ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f000 fb1a 	bl	8002406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a37      	ldr	r2, [pc, #220]	; (8001ee4 <HAL_TIM_MspPostInit+0xfc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d11f      	bne.n	8001e4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a35      	ldr	r2, [pc, #212]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	482a      	ldr	r0, [pc, #168]	; (8001eec <HAL_TIM_MspPostInit+0x104>)
 8001e44:	f000 fafa 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e48:	e047      	b.n	8001eda <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d11f      	bne.n	8001e94 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e82:	2301      	movs	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <HAL_TIM_MspPostInit+0x104>)
 8001e8e:	f000 fad5 	bl	800243c <HAL_GPIO_Init>
}
 8001e92:	e022      	b.n	8001eda <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <HAL_TIM_MspPostInit+0x108>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d11d      	bne.n	8001eda <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_TIM_MspPostInit+0x100>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eba:	2340      	movs	r3, #64	; 0x40
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_TIM_MspPostInit+0x104>)
 8001ed6:	f000 fab1 	bl	800243c <HAL_GPIO_Init>
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40000400 	.word	0x40000400

08001ef4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_USART2_UART_Init+0x50>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f002 fbee 	bl	800470c <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f36:	f7ff fbdf 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200001c4 	.word	0x200001c4
 8001f44:	40004400 	.word	0x40004400

08001f48 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <MX_USART6_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART6_UART_Init+0x4c>)
 8001f80:	f002 fbc4 	bl	800470c <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f7ff fbb5 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000208 	.word	0x20000208
 8001f98:	40011400 	.word	0x40011400

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a32      	ldr	r2, [pc, #200]	; (8002084 <HAL_UART_MspInit+0xe8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12c      	bne.n	8002018 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_UART_MspInit+0xec>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a30      	ldr	r2, [pc, #192]	; (8002088 <HAL_UART_MspInit+0xec>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_UART_MspInit+0xec>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_UART_MspInit+0xec>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_UART_MspInit+0xec>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_UART_MspInit+0xec>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002006:	2307      	movs	r3, #7
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	481e      	ldr	r0, [pc, #120]	; (800208c <HAL_UART_MspInit+0xf0>)
 8002012:	f000 fa13 	bl	800243c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002016:	e030      	b.n	800207a <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART6)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_UART_MspInit+0xf4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12b      	bne.n	800207a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_UART_MspInit+0xec>)
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800205a:	23c0      	movs	r3, #192	; 0xc0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800206a:	2308      	movs	r3, #8
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <HAL_UART_MspInit+0xf8>)
 8002076:	f000 f9e1 	bl	800243c <HAL_GPIO_Init>
}
 800207a:	bf00      	nop
 800207c:	3730      	adds	r7, #48	; 0x30
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40004400 	.word	0x40004400
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000
 8002090:	40011400 	.word	0x40011400
 8002094:	40020800 	.word	0x40020800

08002098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b4:	4c0b      	ldr	r4, [pc, #44]	; (80020e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c2:	f7ff fbff 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c6:	f002 fee9 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ca:	f7ff f957 	bl	800137c <main>
  bx  lr    
 80020ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020dc:	080059f4 	.word	0x080059f4
  ldr r2, =_sbss
 80020e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020e4:	20000260 	.word	0x20000260

080020e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_Init+0x40>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_Init+0x40>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x40>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 f94f 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	2000      	movs	r0, #0
 800211c:	f000 f808 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fb3e 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f967 	bl	8002422 <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 f92f 	bl	80023ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000000 	.word	0x20000000
 8002188:	20000008 	.word	0x20000008
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008
 80021b4:	2000024c 	.word	0x2000024c

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	2000024c 	.word	0x2000024c

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	; (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff8e 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff29 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff3e 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff8e 	bl	800230c <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5d 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff31 	bl	800227c <__NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffa2 	bl	8002374 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e159      	b.n	800270c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 8148 	bne.w	8002706 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	2b02      	cmp	r3, #2
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a2 	beq.w	8002706 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x2f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x202>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x2f4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x1fe>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_GPIO_Init+0x2f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x1fa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_GPIO_Init+0x2fc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x1f6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_GPIO_Init+0x300>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x1f2>
 800262a:	2304      	movs	r3, #4
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800262e:	2307      	movs	r3, #7
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_GPIO_Init+0x304>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f aea2 	bls.w	8002458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e267      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d075      	beq.n	80028b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b82      	ldr	r3, [pc, #520]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b7e      	ldr	r3, [pc, #504]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e242      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x74>
 800280e:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a75      	ldr	r2, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002826:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6f      	ldr	r2, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6c      	ldr	r2, [pc, #432]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 8002840:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a65      	ldr	r2, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fcaa 	bl	80021b8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fca6 	bl	80021b8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e207      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xc0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff fc96 	bl	80021b8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fc92 	bl	80021b8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1f3      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b51      	ldr	r3, [pc, #324]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0xe8>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c7      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4937      	ldr	r1, [pc, #220]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_RCC_OscConfig+0x244>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7ff fc4b 	bl	80021b8 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fc47 	bl	80021b8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a8      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4925      	ldr	r1, [pc, #148]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_RCC_OscConfig+0x244>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff fc2a 	bl	80021b8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff fc26 	bl	80021b8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e187      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d036      	beq.n	8002a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_OscConfig+0x248>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7ff fc0a 	bl	80021b8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff fc06 	bl	80021b8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e167      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x200>
 80029c6:	e01b      	b.n	8002a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x248>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7ff fbf3 	bl	80021b8 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	e00e      	b.n	80029f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d6:	f7ff fbef 	bl	80021b8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d907      	bls.n	80029f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e150      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470000 	.word	0x42470000
 80029f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8097 	beq.w	8002b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b77      	ldr	r3, [pc, #476]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b74      	ldr	r3, [pc, #464]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7ff fbaf 	bl	80021b8 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7ff fbab 	bl	80021b8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e10c      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2ea>
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a63      	ldr	r2, [pc, #396]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	e01c      	b.n	8002acc <HAL_RCC_OscConfig+0x324>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x30c>
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a5e      	ldr	r2, [pc, #376]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a5b      	ldr	r2, [pc, #364]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0x324>
 8002ab4:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a57      	ldr	r2, [pc, #348]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	4b55      	ldr	r3, [pc, #340]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d015      	beq.n	8002b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fb70 	bl	80021b8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7ff fb6c 	bl	80021b8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0cb      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ee      	beq.n	8002adc <HAL_RCC_OscConfig+0x334>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7ff fb5a 	bl	80021b8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7ff fb56 	bl	80021b8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0b5      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ee      	bne.n	8002b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a1 	beq.w	8002c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d05c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d141      	bne.n	8002bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff fb2a 	bl	80021b8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7ff fb26 	bl	80021b8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e087      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	491b      	ldr	r1, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff faff 	bl	80021b8 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7ff fafb 	bl	80021b8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e05c      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bdc:	e054      	b.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7ff fae8 	bl	80021b8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7ff fae4 	bl	80021b8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e045      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x444>
 8002c0a:	e03d      	b.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e038      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d028      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d121      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d11a      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7ff fa16 	bl	80021b8 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7ff fa12 	bl	80021b8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f976 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08005998 	.word	0x08005998
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b094      	sub	sp, #80	; 0x50
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e70:	2300      	movs	r3, #0
 8002e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e74:	2300      	movs	r3, #0
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4b79      	ldr	r3, [pc, #484]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f200 80e1 	bhi.w	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e0db      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e9c:	e0db      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea2:	e0d8      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	6139      	str	r1, [r7, #16]
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4651      	mov	r1, sl
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4651      	mov	r1, sl
 8002f18:	ebb2 0801 	subs.w	r8, r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f36:	4690      	mov	r8, r2
 8002f38:	4699      	mov	r9, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	eb18 0303 	adds.w	r3, r8, r3
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	462b      	mov	r3, r5
 8002f44:	eb49 0303 	adc.w	r3, r9, r3
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f56:	4629      	mov	r1, r5
 8002f58:	024b      	lsls	r3, r1, #9
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f60:	4621      	mov	r1, r4
 8002f62:	024a      	lsls	r2, r1, #9
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f74:	f7fd fe2a 	bl	8000bcc <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f80:	e058      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f82:	4b38      	ldr	r3, [pc, #224]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	0159      	lsls	r1, r3, #5
 8002faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fae:	0150      	lsls	r0, r2, #5
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fba:	4649      	mov	r1, r9
 8002fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	00eb      	lsls	r3, r5, #3
 8002fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fea:	00e2      	lsls	r2, r4, #3
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	18e3      	adds	r3, r4, r3
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	eb45 0303 	adc.w	r3, r5, r3
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800300a:	4629      	mov	r1, r5
 800300c:	028b      	lsls	r3, r1, #10
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003014:	4621      	mov	r1, r4
 8003016:	028a      	lsls	r2, r1, #10
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	61fa      	str	r2, [r7, #28]
 8003024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003028:	f7fd fdd0 	bl	8000bcc <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003058:	4618      	mov	r0, r3
 800305a:	3750      	adds	r7, #80	; 0x50
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	080059a8 	.word	0x080059a8

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b4:	f7ff ffdc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0b5b      	lsrs	r3, r3, #13
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	080059a8 	.word	0x080059a8

080030d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e041      	b.n	800316e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fdd6 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fe3a 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e041      	b.n	800320c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f839 	bl	8003214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 fdeb 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_TIM_PWM_Start+0x24>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e022      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d109      	bne.n	8003266 <HAL_TIM_PWM_Start+0x3e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e015      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d109      	bne.n	8003280 <HAL_TIM_PWM_Start+0x58>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e008      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e068      	b.n	800336c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0x82>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	e013      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0x92>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b8:	e00b      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0xa2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	e003      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 f91c 	bl	8004518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <HAL_TIM_PWM_Start+0x14c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_TIM_PWM_Start+0x14c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d013      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_TIM_PWM_Start+0x150>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_TIM_PWM_Start+0x154>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_TIM_PWM_Start+0x158>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <HAL_TIM_PWM_Start+0x15c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d010      	beq.n	800336a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	e007      	b.n	800336a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40014000 	.word	0x40014000

08003388 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e041      	b.n	800341e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe fcca 	bl	8001d48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 fce2 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_TIM_IC_Start_IT+0x1e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003442:	b2db      	uxtb	r3, r3
 8003444:	e013      	b.n	800346e <HAL_TIM_IC_Start_IT+0x46>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d104      	bne.n	8003456 <HAL_TIM_IC_Start_IT+0x2e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e00b      	b.n	800346e <HAL_TIM_IC_Start_IT+0x46>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d104      	bne.n	8003466 <HAL_TIM_IC_Start_IT+0x3e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003462:	b2db      	uxtb	r3, r3
 8003464:	e003      	b.n	800346e <HAL_TIM_IC_Start_IT+0x46>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <HAL_TIM_IC_Start_IT+0x58>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e013      	b.n	80034a8 <HAL_TIM_IC_Start_IT+0x80>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d104      	bne.n	8003490 <HAL_TIM_IC_Start_IT+0x68>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e00b      	b.n	80034a8 <HAL_TIM_IC_Start_IT+0x80>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d104      	bne.n	80034a0 <HAL_TIM_IC_Start_IT+0x78>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e003      	b.n	80034a8 <HAL_TIM_IC_Start_IT+0x80>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80034aa:	7bbb      	ldrb	r3, [r7, #14]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80034b0:	7b7b      	ldrb	r3, [r7, #13]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0c2      	b.n	8003640 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_TIM_IC_Start_IT+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	e013      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0xca>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d104      	bne.n	80034da <HAL_TIM_IC_Start_IT+0xb2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0xca>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d104      	bne.n	80034ea <HAL_TIM_IC_Start_IT+0xc2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e8:	e003      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0xca>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_IC_Start_IT+0xda>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003500:	e013      	b.n	800352a <HAL_TIM_IC_Start_IT+0x102>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0xea>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003510:	e00b      	b.n	800352a <HAL_TIM_IC_Start_IT+0x102>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0xfa>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003520:	e003      	b.n	800352a <HAL_TIM_IC_Start_IT+0x102>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d841      	bhi.n	80035b4 <HAL_TIM_IC_Start_IT+0x18c>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_TIM_IC_Start_IT+0x110>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800356d 	.word	0x0800356d
 800353c:	080035b5 	.word	0x080035b5
 8003540:	080035b5 	.word	0x080035b5
 8003544:	080035b5 	.word	0x080035b5
 8003548:	0800357f 	.word	0x0800357f
 800354c:	080035b5 	.word	0x080035b5
 8003550:	080035b5 	.word	0x080035b5
 8003554:	080035b5 	.word	0x080035b5
 8003558:	08003591 	.word	0x08003591
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035b5 	.word	0x080035b5
 8003564:	080035b5 	.word	0x080035b5
 8003568:	080035a3 	.word	0x080035a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0202 	orr.w	r2, r2, #2
 800357a:	60da      	str	r2, [r3, #12]
      break;
 800357c:	e01d      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0204 	orr.w	r2, r2, #4
 800358c:	60da      	str	r2, [r3, #12]
      break;
 800358e:	e014      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0208 	orr.w	r2, r2, #8
 800359e:	60da      	str	r2, [r3, #12]
      break;
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0210 	orr.w	r2, r2, #16
 80035b0:	60da      	str	r2, [r3, #12]
      break;
 80035b2:	e002      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13e      	bne.n	800363e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 ffa5 	bl	8004518 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_TIM_IC_Start_IT+0x220>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_TIM_IC_Start_IT+0x1e2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d013      	beq.n	800360a <HAL_TIM_IC_Start_IT+0x1e2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_TIM_IC_Start_IT+0x224>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIM_IC_Start_IT+0x1e2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_TIM_IC_Start_IT+0x228>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIM_IC_Start_IT+0x1e2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <HAL_TIM_IC_Start_IT+0x22c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIM_IC_Start_IT+0x1e2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <HAL_TIM_IC_Start_IT+0x230>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d111      	bne.n	800362e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b06      	cmp	r3, #6
 800361a:	d010      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	e007      	b.n	800363e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40014000 	.word	0x40014000

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0202 	mvn.w	r2, #2
 8003688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd fcaa 	bl	8000ff8 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fb54 	bl	8003d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fb5b 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fc80 	bl	8000ff8 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fb2a 	bl	8003d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fb31 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0208 	mvn.w	r2, #8
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2204      	movs	r2, #4
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fc56 	bl	8000ff8 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fb00 	bl	8003d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb07 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fc2c 	bl	8000ff8 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fad6 	bl	8003d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fadd 	bl	8003d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fab0 	bl	8003d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 ff76 	bl	80046f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 faa2 	bl	8003d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b20      	cmp	r3, #32
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0220 	mvn.w	r2, #32
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 ff40 	bl	80046e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003886:	2302      	movs	r3, #2
 8003888:	e088      	b.n	800399c <HAL_TIM_IC_ConfigChannel+0x130>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f000 fc7e 	bl	80041a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020c 	bic.w	r2, r2, #12
 80038ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6999      	ldr	r1, [r3, #24]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	619a      	str	r2, [r3, #24]
 80038ce:	e060      	b.n	8003992 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d11c      	bne.n	8003910 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f000 fcf6 	bl	80042d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6999      	ldr	r1, [r3, #24]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	021a      	lsls	r2, r3, #8
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	619a      	str	r2, [r3, #24]
 800390e:	e040      	b.n	8003992 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11b      	bne.n	800394e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f000 fd43 	bl	80043b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 020c 	bic.w	r2, r2, #12
 8003938:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69d9      	ldr	r1, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	61da      	str	r2, [r3, #28]
 800394c:	e021      	b.n	8003992 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b0c      	cmp	r3, #12
 8003952:	d11c      	bne.n	800398e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f000 fd60 	bl	8004428 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003976:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69d9      	ldr	r1, [r3, #28]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	61da      	str	r2, [r3, #28]
 800398c:	e001      	b.n	8003992 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0ae      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	f200 809f 	bhi.w	8003b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003b11 	.word	0x08003b11
 80039e0:	08003b11 	.word	0x08003b11
 80039e4:	08003b11 	.word	0x08003b11
 80039e8:	08003a4d 	.word	0x08003a4d
 80039ec:	08003b11 	.word	0x08003b11
 80039f0:	08003b11 	.word	0x08003b11
 80039f4:	08003b11 	.word	0x08003b11
 80039f8:	08003a8f 	.word	0x08003a8f
 80039fc:	08003b11 	.word	0x08003b11
 8003a00:	08003b11 	.word	0x08003b11
 8003a04:	08003b11 	.word	0x08003b11
 8003a08:	08003acf 	.word	0x08003acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fa3c 	bl	8003e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
      break;
 8003a4a:	e064      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fa82 	bl	8003f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]
      break;
 8003a8c:	e043      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 facd 	bl	8004034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0208 	orr.w	r2, r2, #8
 8003aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0204 	bic.w	r2, r2, #4
 8003ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	61da      	str	r2, [r3, #28]
      break;
 8003acc:	e023      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fb17 	bl	8004108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	61da      	str	r2, [r3, #28]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_ConfigClockSource+0x1c>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0b4      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x186>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d03e      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0xd4>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	f200 8087 	bhi.w	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	f000 8086 	beq.w	8003c9a <HAL_TIM_ConfigClockSource+0x172>
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d87f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d01a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0xa6>
 8003b98:	2b70      	cmp	r3, #112	; 0x70
 8003b9a:	d87b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b60      	cmp	r3, #96	; 0x60
 8003b9e:	d050      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d877      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b50      	cmp	r3, #80	; 0x50
 8003ba6:	d03c      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d873      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d058      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x13a>
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d86f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d064      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d86b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d060      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d867      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d05a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	e062      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f000 fc7b 	bl	80044d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	609a      	str	r2, [r3, #8]
      break;
 8003bfa:	e04f      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f000 fc64 	bl	80044d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1e:	609a      	str	r2, [r3, #8]
      break;
 8003c20:	e03c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fb22 	bl	8004278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2150      	movs	r1, #80	; 0x50
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fc31 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e02c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fb7e 	bl	8004350 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2160      	movs	r1, #96	; 0x60
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc21 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e01c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fb02 	bl	8004278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2140      	movs	r1, #64	; 0x40
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fc11 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e00c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 fc08 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c92:	e003      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      break;
 8003c98:	e000      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d831      	bhi.n	8003d30 <HAL_TIM_ReadCapturedValue+0x78>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d31 	.word	0x08003d31
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	60fb      	str	r3, [r7, #12]

      break;
 8003d10:	e00f      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	60fb      	str	r3, [r7, #12]

      break;
 8003d1a:	e00a      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	60fb      	str	r3, [r7, #12]

      break;
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	60fb      	str	r3, [r7, #12]

      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d30:	bf00      	nop
  }

  return tmpreg;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <TIM_Base_SetConfig+0xe8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <TIM_Base_SetConfig+0xec>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <TIM_Base_SetConfig+0xf0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01b      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d017      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <TIM_Base_SetConfig+0xe8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <TIM_Base_SetConfig+0xec>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <TIM_Base_SetConfig+0xf0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <TIM_Base_SetConfig+0xf4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <TIM_Base_SetConfig+0xf8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <TIM_Base_SetConfig+0xfc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d103      	bne.n	8003e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	615a      	str	r2, [r3, #20]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800

08003e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 0302 	bic.w	r3, r3, #2
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <TIM_OC1_SetConfig+0xc8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d10c      	bne.n	8003f06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0308 	bic.w	r3, r3, #8
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <TIM_OC1_SetConfig+0xc8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40010000 	.word	0x40010000

08003f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0210 	bic.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0320 	bic.w	r3, r3, #32
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <TIM_OC2_SetConfig+0xd4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10d      	bne.n	8003fd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC2_SetConfig+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d113      	bne.n	8004008 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000

08004034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800407c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <TIM_OC3_SetConfig+0xd0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10d      	bne.n	80040ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <TIM_OC3_SetConfig+0xd0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d113      	bne.n	80040de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40010000 	.word	0x40010000

08004108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <TIM_OC4_SetConfig+0x9c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d109      	bne.n	800417c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000

080041a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <TIM_TI1_SetConfig+0xbc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_TI1_SetConfig+0x56>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041dc:	d00f      	beq.n	80041fe <TIM_TI1_SetConfig+0x56>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <TIM_TI1_SetConfig+0xc0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_TI1_SetConfig+0x56>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <TIM_TI1_SetConfig+0xc4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_TI1_SetConfig+0x56>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <TIM_TI1_SetConfig+0xc8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_TI1_SetConfig+0x56>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <TIM_TI1_SetConfig+0xcc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <TIM_TI1_SetConfig+0x5a>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <TIM_TI1_SetConfig+0x5c>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e003      	b.n	8004222 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	b2db      	uxtb	r3, r3
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f023 030a 	bic.w	r3, r3, #10
 800423c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f003 030a 	and.w	r3, r3, #10
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000

08004278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 030a 	bic.w	r3, r3, #10
 80042b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 0210 	bic.w	r2, r3, #16
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004302:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	031b      	lsls	r3, r3, #12
 800431a:	b29b      	uxth	r3, r3
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004328:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0210 	bic.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0303 	bic.w	r3, r3, #3
 80043dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004400:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004466:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	031b      	lsls	r3, r3, #12
 800446c:	b29b      	uxth	r3, r3
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800447a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	031b      	lsls	r3, r3, #12
 8004480:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	f043 0307 	orr.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2201      	movs	r2, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	43db      	mvns	r3, r3
 800453a:	401a      	ands	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e050      	b.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d018      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c8:	d013      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a15      	ldr	r2, [pc, #84]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10c      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4313      	orrs	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40014000 	.word	0x40014000

08004640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004658:	2302      	movs	r3, #2
 800465a:	e03d      	b.n	80046d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e03f      	b.n	800479e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fc32 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	; 0x24
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f929 	bl	80049a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b08a      	sub	sp, #40	; 0x28
 80047aa:	af02      	add	r7, sp, #8
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d17c      	bne.n	80048c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_Transmit+0x2c>
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e075      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Transmit+0x3e>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e06e      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2221      	movs	r2, #33	; 0x21
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047fa:	f7fd fcdd 	bl	80021b8 <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d108      	bne.n	8004828 <HAL_UART_Transmit+0x82>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e003      	b.n	8004830 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004838:	e02a      	b.n	8004890 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2180      	movs	r1, #128	; 0x80
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f840 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e036      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	3302      	adds	r3, #2
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e007      	b.n	8004882 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1cf      	bne.n	800483a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f810 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e006      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b090      	sub	sp, #64	; 0x40
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	e050      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d04c      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x30>
 80048ea:	f7fd fc65 	bl	80021b8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d241      	bcs.n	800497e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800491a:	637a      	str	r2, [r7, #52]	; 0x34
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	613b      	str	r3, [r7, #16]
   return(result);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800494e:	623a      	str	r2, [r7, #32]
 8004950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	69f9      	ldr	r1, [r7, #28]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	61bb      	str	r3, [r7, #24]
   return(result);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e00f      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d09f      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3740      	adds	r7, #64	; 0x40
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ac:	b0c0      	sub	sp, #256	; 0x100
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	68d9      	ldr	r1, [r3, #12]
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	ea40 0301 	orr.w	r3, r0, r1
 80049d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a00:	f021 010c 	bic.w	r1, r1, #12
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a22:	6999      	ldr	r1, [r3, #24]
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	ea40 0301 	orr.w	r3, r0, r1
 8004a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b8f      	ldr	r3, [pc, #572]	; (8004c74 <UART_SetConfig+0x2cc>)
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d005      	beq.n	8004a48 <UART_SetConfig+0xa0>
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b8d      	ldr	r3, [pc, #564]	; (8004c78 <UART_SetConfig+0x2d0>)
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d104      	bne.n	8004a52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7fe fb32 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a50:	e003      	b.n	8004a5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a52:	f7fe fb19 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8004a56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	f040 810c 	bne.w	8004c80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	1891      	adds	r1, r2, r2
 8004a80:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a82:	415b      	adcs	r3, r3
 8004a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	eb12 0801 	adds.w	r8, r2, r1
 8004a90:	4629      	mov	r1, r5
 8004a92:	eb43 0901 	adc.w	r9, r3, r1
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aaa:	4690      	mov	r8, r2
 8004aac:	4699      	mov	r9, r3
 8004aae:	4623      	mov	r3, r4
 8004ab0:	eb18 0303 	adds.w	r3, r8, r3
 8004ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab8:	462b      	mov	r3, r5
 8004aba:	eb49 0303 	adc.w	r3, r9, r3
 8004abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ace:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	18db      	adds	r3, r3, r3
 8004ada:	653b      	str	r3, [r7, #80]	; 0x50
 8004adc:	4613      	mov	r3, r2
 8004ade:	eb42 0303 	adc.w	r3, r2, r3
 8004ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aec:	f7fc f86e 	bl	8000bcc <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <UART_SetConfig+0x2d4>)
 8004af6:	fba3 2302 	umull	r2, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	011c      	lsls	r4, r3, #4
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b20:	4641      	mov	r1, r8
 8004b22:	eb12 0a01 	adds.w	sl, r2, r1
 8004b26:	4649      	mov	r1, r9
 8004b28:	eb43 0b01 	adc.w	fp, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b40:	4692      	mov	sl, r2
 8004b42:	469b      	mov	fp, r3
 8004b44:	4643      	mov	r3, r8
 8004b46:	eb1a 0303 	adds.w	r3, sl, r3
 8004b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	eb4b 0303 	adc.w	r3, fp, r3
 8004b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	18db      	adds	r3, r3, r3
 8004b70:	643b      	str	r3, [r7, #64]	; 0x40
 8004b72:	4613      	mov	r3, r2
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	647b      	str	r3, [r7, #68]	; 0x44
 8004b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b82:	f7fc f823 	bl	8000bcc <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <UART_SetConfig+0x2d4>)
 8004b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2264      	movs	r2, #100	; 0x64
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	1acb      	subs	r3, r1, r3
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ba2:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <UART_SetConfig+0x2d4>)
 8004ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bb0:	441c      	add	r4, r3
 8004bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	1851      	adds	r1, r2, r1
 8004bd8:	6339      	str	r1, [r7, #48]	; 0x30
 8004bda:	4649      	mov	r1, r9
 8004bdc:	414b      	adcs	r3, r1
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bec:	4659      	mov	r1, fp
 8004bee:	00cb      	lsls	r3, r1, #3
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	00ca      	lsls	r2, r1, #3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4642      	mov	r2, r8
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c08:	464b      	mov	r3, r9
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c28:	460b      	mov	r3, r1
 8004c2a:	18db      	adds	r3, r3, r3
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	4613      	mov	r3, r2
 8004c30:	eb42 0303 	adc.w	r3, r2, r3
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c3e:	f7fb ffc5 	bl	8000bcc <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <UART_SetConfig+0x2d4>)
 8004c48:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	2164      	movs	r1, #100	; 0x64
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	3332      	adds	r3, #50	; 0x32
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <UART_SetConfig+0x2d4>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4422      	add	r2, r4
 8004c6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c70:	e105      	b.n	8004e7e <UART_SetConfig+0x4d6>
 8004c72:	bf00      	nop
 8004c74:	40011000 	.word	0x40011000
 8004c78:	40011400 	.word	0x40011400
 8004c7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c92:	4642      	mov	r2, r8
 8004c94:	464b      	mov	r3, r9
 8004c96:	1891      	adds	r1, r2, r2
 8004c98:	6239      	str	r1, [r7, #32]
 8004c9a:	415b      	adcs	r3, r3
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	1854      	adds	r4, r2, r1
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	eb43 0501 	adc.w	r5, r3, r1
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	00eb      	lsls	r3, r5, #3
 8004cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cba:	00e2      	lsls	r2, r4, #3
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	18e3      	adds	r3, r4, r3
 8004cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cc8:	464b      	mov	r3, r9
 8004cca:	eb45 0303 	adc.w	r3, r5, r3
 8004cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cee:	4629      	mov	r1, r5
 8004cf0:	008b      	lsls	r3, r1, #2
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	008a      	lsls	r2, r1, #2
 8004cfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d00:	f7fb ff64 	bl	8000bcc <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <UART_SetConfig+0x4e4>)
 8004d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	011c      	lsls	r4, r3, #4
 8004d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	1891      	adds	r1, r2, r2
 8004d2a:	61b9      	str	r1, [r7, #24]
 8004d2c:	415b      	adcs	r3, r3
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d34:	4641      	mov	r1, r8
 8004d36:	1851      	adds	r1, r2, r1
 8004d38:	6139      	str	r1, [r7, #16]
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	414b      	adcs	r3, r1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	00cb      	lsls	r3, r1, #3
 8004d50:	4651      	mov	r1, sl
 8004d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d56:	4651      	mov	r1, sl
 8004d58:	00ca      	lsls	r2, r1, #3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4642      	mov	r2, r8
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d68:	464b      	mov	r3, r9
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	eb42 0303 	adc.w	r3, r2, r3
 8004d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	008b      	lsls	r3, r1, #2
 8004d90:	4641      	mov	r1, r8
 8004d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d96:	4641      	mov	r1, r8
 8004d98:	008a      	lsls	r2, r1, #2
 8004d9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d9e:	f7fb ff15 	bl	8000bcc <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <UART_SetConfig+0x4e4>)
 8004da8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	2164      	movs	r1, #100	; 0x64
 8004db0:	fb01 f303 	mul.w	r3, r1, r3
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	3332      	adds	r3, #50	; 0x32
 8004dba:	4a34      	ldr	r2, [pc, #208]	; (8004e8c <UART_SetConfig+0x4e4>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc6:	441c      	add	r4, r3
 8004dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dcc:	2200      	movs	r2, #0
 8004dce:	673b      	str	r3, [r7, #112]	; 0x70
 8004dd0:	677a      	str	r2, [r7, #116]	; 0x74
 8004dd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	464b      	mov	r3, r9
 8004dda:	1891      	adds	r1, r2, r2
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	415b      	adcs	r3, r3
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de6:	4641      	mov	r1, r8
 8004de8:	1851      	adds	r1, r2, r1
 8004dea:	6039      	str	r1, [r7, #0]
 8004dec:	4649      	mov	r1, r9
 8004dee:	414b      	adcs	r3, r1
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dfe:	4659      	mov	r1, fp
 8004e00:	00cb      	lsls	r3, r1, #3
 8004e02:	4651      	mov	r1, sl
 8004e04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e08:	4651      	mov	r1, sl
 8004e0a:	00ca      	lsls	r2, r1, #3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4603      	mov	r3, r0
 8004e12:	4642      	mov	r2, r8
 8004e14:	189b      	adds	r3, r3, r2
 8004e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e18:	464b      	mov	r3, r9
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2c:	667a      	str	r2, [r7, #100]	; 0x64
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	008b      	lsls	r3, r1, #2
 8004e3e:	4641      	mov	r1, r8
 8004e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e44:	4641      	mov	r1, r8
 8004e46:	008a      	lsls	r2, r1, #2
 8004e48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e4c:	f7fb febe 	bl	8000bcc <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <UART_SetConfig+0x4e4>)
 8004e56:	fba3 1302 	umull	r1, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2164      	movs	r1, #100	; 0x64
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	3332      	adds	r3, #50	; 0x32
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <UART_SetConfig+0x4e4>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4422      	add	r2, r4
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	bf00      	nop
 8004e80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8a:	bf00      	nop
 8004e8c:	51eb851f 	.word	0x51eb851f

08004e90 <__errno>:
 8004e90:	4b01      	ldr	r3, [pc, #4]	; (8004e98 <__errno+0x8>)
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000000c 	.word	0x2000000c

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	; (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	; (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	; (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	; (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 fd4e 	bl	8005950 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	080059ec 	.word	0x080059ec
 8004ed8:	080059ec 	.word	0x080059ec
 8004edc:	080059ec 	.word	0x080059ec
 8004ee0:	080059f0 	.word	0x080059f0

08004ee4 <memcpy>:
 8004ee4:	440a      	add	r2, r1
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eec:	d100      	bne.n	8004ef0 <memcpy+0xc>
 8004eee:	4770      	bx	lr
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004efa:	4291      	cmp	r1, r2
 8004efc:	d1f9      	bne.n	8004ef2 <memcpy+0xe>
 8004efe:	bd10      	pop	{r4, pc}

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <siprintf>:
 8004f10:	b40e      	push	{r1, r2, r3}
 8004f12:	b500      	push	{lr}
 8004f14:	b09c      	sub	sp, #112	; 0x70
 8004f16:	ab1d      	add	r3, sp, #116	; 0x74
 8004f18:	9002      	str	r0, [sp, #8]
 8004f1a:	9006      	str	r0, [sp, #24]
 8004f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f20:	4809      	ldr	r0, [pc, #36]	; (8004f48 <siprintf+0x38>)
 8004f22:	9107      	str	r1, [sp, #28]
 8004f24:	9104      	str	r1, [sp, #16]
 8004f26:	4909      	ldr	r1, [pc, #36]	; (8004f4c <siprintf+0x3c>)
 8004f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2c:	9105      	str	r1, [sp, #20]
 8004f2e:	6800      	ldr	r0, [r0, #0]
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	a902      	add	r1, sp, #8
 8004f34:	f000 f8a2 	bl	800507c <_svfiprintf_r>
 8004f38:	9b02      	ldr	r3, [sp, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	b01c      	add	sp, #112	; 0x70
 8004f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f44:	b003      	add	sp, #12
 8004f46:	4770      	bx	lr
 8004f48:	2000000c 	.word	0x2000000c
 8004f4c:	ffff0208 	.word	0xffff0208

08004f50 <_vsniprintf_r>:
 8004f50:	b530      	push	{r4, r5, lr}
 8004f52:	4614      	mov	r4, r2
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	b09b      	sub	sp, #108	; 0x6c
 8004f58:	4605      	mov	r5, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	da05      	bge.n	8004f6a <_vsniprintf_r+0x1a>
 8004f5e:	238b      	movs	r3, #139	; 0x8b
 8004f60:	6003      	str	r3, [r0, #0]
 8004f62:	f04f 30ff 	mov.w	r0, #4294967295
 8004f66:	b01b      	add	sp, #108	; 0x6c
 8004f68:	bd30      	pop	{r4, r5, pc}
 8004f6a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004f72:	bf14      	ite	ne
 8004f74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f78:	4623      	moveq	r3, r4
 8004f7a:	9302      	str	r3, [sp, #8]
 8004f7c:	9305      	str	r3, [sp, #20]
 8004f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f82:	9100      	str	r1, [sp, #0]
 8004f84:	9104      	str	r1, [sp, #16]
 8004f86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004f8a:	4669      	mov	r1, sp
 8004f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f8e:	f000 f875 	bl	800507c <_svfiprintf_r>
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	bfbc      	itt	lt
 8004f96:	238b      	movlt	r3, #139	; 0x8b
 8004f98:	602b      	strlt	r3, [r5, #0]
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	d0e3      	beq.n	8004f66 <_vsniprintf_r+0x16>
 8004f9e:	9b00      	ldr	r3, [sp, #0]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e7df      	b.n	8004f66 <_vsniprintf_r+0x16>
	...

08004fa8 <vsniprintf>:
 8004fa8:	b507      	push	{r0, r1, r2, lr}
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	460a      	mov	r2, r1
 8004fb0:	4601      	mov	r1, r0
 8004fb2:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <vsniprintf+0x18>)
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	f7ff ffcb 	bl	8004f50 <_vsniprintf_r>
 8004fba:	b003      	add	sp, #12
 8004fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fc0:	2000000c 	.word	0x2000000c

08004fc4 <__ssputs_r>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	688e      	ldr	r6, [r1, #8]
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	4682      	mov	sl, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	4690      	mov	r8, r2
 8004fd2:	461f      	mov	r7, r3
 8004fd4:	d838      	bhi.n	8005048 <__ssputs_r+0x84>
 8004fd6:	898a      	ldrh	r2, [r1, #12]
 8004fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fdc:	d032      	beq.n	8005044 <__ssputs_r+0x80>
 8004fde:	6825      	ldr	r5, [r4, #0]
 8004fe0:	6909      	ldr	r1, [r1, #16]
 8004fe2:	eba5 0901 	sub.w	r9, r5, r1
 8004fe6:	6965      	ldr	r5, [r4, #20]
 8004fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	444b      	add	r3, r9
 8004ff4:	106d      	asrs	r5, r5, #1
 8004ff6:	429d      	cmp	r5, r3
 8004ff8:	bf38      	it	cc
 8004ffa:	461d      	movcc	r5, r3
 8004ffc:	0553      	lsls	r3, r2, #21
 8004ffe:	d531      	bpl.n	8005064 <__ssputs_r+0xa0>
 8005000:	4629      	mov	r1, r5
 8005002:	f000 fb55 	bl	80056b0 <_malloc_r>
 8005006:	4606      	mov	r6, r0
 8005008:	b950      	cbnz	r0, 8005020 <__ssputs_r+0x5c>
 800500a:	230c      	movs	r3, #12
 800500c:	f8ca 3000 	str.w	r3, [sl]
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005020:	6921      	ldr	r1, [r4, #16]
 8005022:	464a      	mov	r2, r9
 8005024:	f7ff ff5e 	bl	8004ee4 <memcpy>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800502e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	6126      	str	r6, [r4, #16]
 8005036:	6165      	str	r5, [r4, #20]
 8005038:	444e      	add	r6, r9
 800503a:	eba5 0509 	sub.w	r5, r5, r9
 800503e:	6026      	str	r6, [r4, #0]
 8005040:	60a5      	str	r5, [r4, #8]
 8005042:	463e      	mov	r6, r7
 8005044:	42be      	cmp	r6, r7
 8005046:	d900      	bls.n	800504a <__ssputs_r+0x86>
 8005048:	463e      	mov	r6, r7
 800504a:	6820      	ldr	r0, [r4, #0]
 800504c:	4632      	mov	r2, r6
 800504e:	4641      	mov	r1, r8
 8005050:	f000 faa8 	bl	80055a4 <memmove>
 8005054:	68a3      	ldr	r3, [r4, #8]
 8005056:	1b9b      	subs	r3, r3, r6
 8005058:	60a3      	str	r3, [r4, #8]
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	4433      	add	r3, r6
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	2000      	movs	r0, #0
 8005062:	e7db      	b.n	800501c <__ssputs_r+0x58>
 8005064:	462a      	mov	r2, r5
 8005066:	f000 fb97 	bl	8005798 <_realloc_r>
 800506a:	4606      	mov	r6, r0
 800506c:	2800      	cmp	r0, #0
 800506e:	d1e1      	bne.n	8005034 <__ssputs_r+0x70>
 8005070:	6921      	ldr	r1, [r4, #16]
 8005072:	4650      	mov	r0, sl
 8005074:	f000 fab0 	bl	80055d8 <_free_r>
 8005078:	e7c7      	b.n	800500a <__ssputs_r+0x46>
	...

0800507c <_svfiprintf_r>:
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	4698      	mov	r8, r3
 8005082:	898b      	ldrh	r3, [r1, #12]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	b09d      	sub	sp, #116	; 0x74
 8005088:	4607      	mov	r7, r0
 800508a:	460d      	mov	r5, r1
 800508c:	4614      	mov	r4, r2
 800508e:	d50e      	bpl.n	80050ae <_svfiprintf_r+0x32>
 8005090:	690b      	ldr	r3, [r1, #16]
 8005092:	b963      	cbnz	r3, 80050ae <_svfiprintf_r+0x32>
 8005094:	2140      	movs	r1, #64	; 0x40
 8005096:	f000 fb0b 	bl	80056b0 <_malloc_r>
 800509a:	6028      	str	r0, [r5, #0]
 800509c:	6128      	str	r0, [r5, #16]
 800509e:	b920      	cbnz	r0, 80050aa <_svfiprintf_r+0x2e>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	e0d1      	b.n	800524e <_svfiprintf_r+0x1d2>
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	616b      	str	r3, [r5, #20]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9309      	str	r3, [sp, #36]	; 0x24
 80050b2:	2320      	movs	r3, #32
 80050b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050bc:	2330      	movs	r3, #48	; 0x30
 80050be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005268 <_svfiprintf_r+0x1ec>
 80050c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050c6:	f04f 0901 	mov.w	r9, #1
 80050ca:	4623      	mov	r3, r4
 80050cc:	469a      	mov	sl, r3
 80050ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d2:	b10a      	cbz	r2, 80050d8 <_svfiprintf_r+0x5c>
 80050d4:	2a25      	cmp	r2, #37	; 0x25
 80050d6:	d1f9      	bne.n	80050cc <_svfiprintf_r+0x50>
 80050d8:	ebba 0b04 	subs.w	fp, sl, r4
 80050dc:	d00b      	beq.n	80050f6 <_svfiprintf_r+0x7a>
 80050de:	465b      	mov	r3, fp
 80050e0:	4622      	mov	r2, r4
 80050e2:	4629      	mov	r1, r5
 80050e4:	4638      	mov	r0, r7
 80050e6:	f7ff ff6d 	bl	8004fc4 <__ssputs_r>
 80050ea:	3001      	adds	r0, #1
 80050ec:	f000 80aa 	beq.w	8005244 <_svfiprintf_r+0x1c8>
 80050f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f2:	445a      	add	r2, fp
 80050f4:	9209      	str	r2, [sp, #36]	; 0x24
 80050f6:	f89a 3000 	ldrb.w	r3, [sl]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80a2 	beq.w	8005244 <_svfiprintf_r+0x1c8>
 8005100:	2300      	movs	r3, #0
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800510a:	f10a 0a01 	add.w	sl, sl, #1
 800510e:	9304      	str	r3, [sp, #16]
 8005110:	9307      	str	r3, [sp, #28]
 8005112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005116:	931a      	str	r3, [sp, #104]	; 0x68
 8005118:	4654      	mov	r4, sl
 800511a:	2205      	movs	r2, #5
 800511c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005120:	4851      	ldr	r0, [pc, #324]	; (8005268 <_svfiprintf_r+0x1ec>)
 8005122:	f7fb f865 	bl	80001f0 <memchr>
 8005126:	9a04      	ldr	r2, [sp, #16]
 8005128:	b9d8      	cbnz	r0, 8005162 <_svfiprintf_r+0xe6>
 800512a:	06d0      	lsls	r0, r2, #27
 800512c:	bf44      	itt	mi
 800512e:	2320      	movmi	r3, #32
 8005130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005134:	0711      	lsls	r1, r2, #28
 8005136:	bf44      	itt	mi
 8005138:	232b      	movmi	r3, #43	; 0x2b
 800513a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800513e:	f89a 3000 	ldrb.w	r3, [sl]
 8005142:	2b2a      	cmp	r3, #42	; 0x2a
 8005144:	d015      	beq.n	8005172 <_svfiprintf_r+0xf6>
 8005146:	9a07      	ldr	r2, [sp, #28]
 8005148:	4654      	mov	r4, sl
 800514a:	2000      	movs	r0, #0
 800514c:	f04f 0c0a 	mov.w	ip, #10
 8005150:	4621      	mov	r1, r4
 8005152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005156:	3b30      	subs	r3, #48	; 0x30
 8005158:	2b09      	cmp	r3, #9
 800515a:	d94e      	bls.n	80051fa <_svfiprintf_r+0x17e>
 800515c:	b1b0      	cbz	r0, 800518c <_svfiprintf_r+0x110>
 800515e:	9207      	str	r2, [sp, #28]
 8005160:	e014      	b.n	800518c <_svfiprintf_r+0x110>
 8005162:	eba0 0308 	sub.w	r3, r0, r8
 8005166:	fa09 f303 	lsl.w	r3, r9, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	46a2      	mov	sl, r4
 8005170:	e7d2      	b.n	8005118 <_svfiprintf_r+0x9c>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	1d19      	adds	r1, r3, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	9103      	str	r1, [sp, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	bfbb      	ittet	lt
 800517e:	425b      	neglt	r3, r3
 8005180:	f042 0202 	orrlt.w	r2, r2, #2
 8005184:	9307      	strge	r3, [sp, #28]
 8005186:	9307      	strlt	r3, [sp, #28]
 8005188:	bfb8      	it	lt
 800518a:	9204      	strlt	r2, [sp, #16]
 800518c:	7823      	ldrb	r3, [r4, #0]
 800518e:	2b2e      	cmp	r3, #46	; 0x2e
 8005190:	d10c      	bne.n	80051ac <_svfiprintf_r+0x130>
 8005192:	7863      	ldrb	r3, [r4, #1]
 8005194:	2b2a      	cmp	r3, #42	; 0x2a
 8005196:	d135      	bne.n	8005204 <_svfiprintf_r+0x188>
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	1d1a      	adds	r2, r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	9203      	str	r2, [sp, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bfb8      	it	lt
 80051a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80051a8:	3402      	adds	r4, #2
 80051aa:	9305      	str	r3, [sp, #20]
 80051ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005278 <_svfiprintf_r+0x1fc>
 80051b0:	7821      	ldrb	r1, [r4, #0]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4650      	mov	r0, sl
 80051b6:	f7fb f81b 	bl	80001f0 <memchr>
 80051ba:	b140      	cbz	r0, 80051ce <_svfiprintf_r+0x152>
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	eba0 000a 	sub.w	r0, r0, sl
 80051c2:	fa03 f000 	lsl.w	r0, r3, r0
 80051c6:	9b04      	ldr	r3, [sp, #16]
 80051c8:	4303      	orrs	r3, r0
 80051ca:	3401      	adds	r4, #1
 80051cc:	9304      	str	r3, [sp, #16]
 80051ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d2:	4826      	ldr	r0, [pc, #152]	; (800526c <_svfiprintf_r+0x1f0>)
 80051d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051d8:	2206      	movs	r2, #6
 80051da:	f7fb f809 	bl	80001f0 <memchr>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d038      	beq.n	8005254 <_svfiprintf_r+0x1d8>
 80051e2:	4b23      	ldr	r3, [pc, #140]	; (8005270 <_svfiprintf_r+0x1f4>)
 80051e4:	bb1b      	cbnz	r3, 800522e <_svfiprintf_r+0x1b2>
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	3307      	adds	r3, #7
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	3308      	adds	r3, #8
 80051f0:	9303      	str	r3, [sp, #12]
 80051f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f4:	4433      	add	r3, r6
 80051f6:	9309      	str	r3, [sp, #36]	; 0x24
 80051f8:	e767      	b.n	80050ca <_svfiprintf_r+0x4e>
 80051fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80051fe:	460c      	mov	r4, r1
 8005200:	2001      	movs	r0, #1
 8005202:	e7a5      	b.n	8005150 <_svfiprintf_r+0xd4>
 8005204:	2300      	movs	r3, #0
 8005206:	3401      	adds	r4, #1
 8005208:	9305      	str	r3, [sp, #20]
 800520a:	4619      	mov	r1, r3
 800520c:	f04f 0c0a 	mov.w	ip, #10
 8005210:	4620      	mov	r0, r4
 8005212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005216:	3a30      	subs	r2, #48	; 0x30
 8005218:	2a09      	cmp	r2, #9
 800521a:	d903      	bls.n	8005224 <_svfiprintf_r+0x1a8>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0c5      	beq.n	80051ac <_svfiprintf_r+0x130>
 8005220:	9105      	str	r1, [sp, #20]
 8005222:	e7c3      	b.n	80051ac <_svfiprintf_r+0x130>
 8005224:	fb0c 2101 	mla	r1, ip, r1, r2
 8005228:	4604      	mov	r4, r0
 800522a:	2301      	movs	r3, #1
 800522c:	e7f0      	b.n	8005210 <_svfiprintf_r+0x194>
 800522e:	ab03      	add	r3, sp, #12
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	462a      	mov	r2, r5
 8005234:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <_svfiprintf_r+0x1f8>)
 8005236:	a904      	add	r1, sp, #16
 8005238:	4638      	mov	r0, r7
 800523a:	f3af 8000 	nop.w
 800523e:	1c42      	adds	r2, r0, #1
 8005240:	4606      	mov	r6, r0
 8005242:	d1d6      	bne.n	80051f2 <_svfiprintf_r+0x176>
 8005244:	89ab      	ldrh	r3, [r5, #12]
 8005246:	065b      	lsls	r3, r3, #25
 8005248:	f53f af2c 	bmi.w	80050a4 <_svfiprintf_r+0x28>
 800524c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800524e:	b01d      	add	sp, #116	; 0x74
 8005250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005254:	ab03      	add	r3, sp, #12
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	462a      	mov	r2, r5
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <_svfiprintf_r+0x1f8>)
 800525c:	a904      	add	r1, sp, #16
 800525e:	4638      	mov	r0, r7
 8005260:	f000 f87a 	bl	8005358 <_printf_i>
 8005264:	e7eb      	b.n	800523e <_svfiprintf_r+0x1c2>
 8005266:	bf00      	nop
 8005268:	080059b0 	.word	0x080059b0
 800526c:	080059ba 	.word	0x080059ba
 8005270:	00000000 	.word	0x00000000
 8005274:	08004fc5 	.word	0x08004fc5
 8005278:	080059b6 	.word	0x080059b6

0800527c <_printf_common>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	4616      	mov	r6, r2
 8005282:	4699      	mov	r9, r3
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800528c:	4293      	cmp	r3, r2
 800528e:	bfb8      	it	lt
 8005290:	4613      	movlt	r3, r2
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005298:	4607      	mov	r7, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b10a      	cbz	r2, 80052a2 <_printf_common+0x26>
 800529e:	3301      	adds	r3, #1
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	0699      	lsls	r1, r3, #26
 80052a6:	bf42      	ittt	mi
 80052a8:	6833      	ldrmi	r3, [r6, #0]
 80052aa:	3302      	addmi	r3, #2
 80052ac:	6033      	strmi	r3, [r6, #0]
 80052ae:	6825      	ldr	r5, [r4, #0]
 80052b0:	f015 0506 	ands.w	r5, r5, #6
 80052b4:	d106      	bne.n	80052c4 <_printf_common+0x48>
 80052b6:	f104 0a19 	add.w	sl, r4, #25
 80052ba:	68e3      	ldr	r3, [r4, #12]
 80052bc:	6832      	ldr	r2, [r6, #0]
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dc26      	bgt.n	8005312 <_printf_common+0x96>
 80052c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c8:	1e13      	subs	r3, r2, #0
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	bf18      	it	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	0692      	lsls	r2, r2, #26
 80052d2:	d42b      	bmi.n	800532c <_printf_common+0xb0>
 80052d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d8:	4649      	mov	r1, r9
 80052da:	4638      	mov	r0, r7
 80052dc:	47c0      	blx	r8
 80052de:	3001      	adds	r0, #1
 80052e0:	d01e      	beq.n	8005320 <_printf_common+0xa4>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	68e5      	ldr	r5, [r4, #12]
 80052e6:	6832      	ldr	r2, [r6, #0]
 80052e8:	f003 0306 	and.w	r3, r3, #6
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	bf08      	it	eq
 80052f0:	1aad      	subeq	r5, r5, r2
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	bf0c      	ite	eq
 80052f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052fc:	2500      	movne	r5, #0
 80052fe:	4293      	cmp	r3, r2
 8005300:	bfc4      	itt	gt
 8005302:	1a9b      	subgt	r3, r3, r2
 8005304:	18ed      	addgt	r5, r5, r3
 8005306:	2600      	movs	r6, #0
 8005308:	341a      	adds	r4, #26
 800530a:	42b5      	cmp	r5, r6
 800530c:	d11a      	bne.n	8005344 <_printf_common+0xc8>
 800530e:	2000      	movs	r0, #0
 8005310:	e008      	b.n	8005324 <_printf_common+0xa8>
 8005312:	2301      	movs	r3, #1
 8005314:	4652      	mov	r2, sl
 8005316:	4649      	mov	r1, r9
 8005318:	4638      	mov	r0, r7
 800531a:	47c0      	blx	r8
 800531c:	3001      	adds	r0, #1
 800531e:	d103      	bne.n	8005328 <_printf_common+0xac>
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005328:	3501      	adds	r5, #1
 800532a:	e7c6      	b.n	80052ba <_printf_common+0x3e>
 800532c:	18e1      	adds	r1, r4, r3
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	2030      	movs	r0, #48	; 0x30
 8005332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005336:	4422      	add	r2, r4
 8005338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800533c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005340:	3302      	adds	r3, #2
 8005342:	e7c7      	b.n	80052d4 <_printf_common+0x58>
 8005344:	2301      	movs	r3, #1
 8005346:	4622      	mov	r2, r4
 8005348:	4649      	mov	r1, r9
 800534a:	4638      	mov	r0, r7
 800534c:	47c0      	blx	r8
 800534e:	3001      	adds	r0, #1
 8005350:	d0e6      	beq.n	8005320 <_printf_common+0xa4>
 8005352:	3601      	adds	r6, #1
 8005354:	e7d9      	b.n	800530a <_printf_common+0x8e>
	...

08005358 <_printf_i>:
 8005358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	7e0f      	ldrb	r7, [r1, #24]
 800535e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005360:	2f78      	cmp	r7, #120	; 0x78
 8005362:	4691      	mov	r9, r2
 8005364:	4680      	mov	r8, r0
 8005366:	460c      	mov	r4, r1
 8005368:	469a      	mov	sl, r3
 800536a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800536e:	d807      	bhi.n	8005380 <_printf_i+0x28>
 8005370:	2f62      	cmp	r7, #98	; 0x62
 8005372:	d80a      	bhi.n	800538a <_printf_i+0x32>
 8005374:	2f00      	cmp	r7, #0
 8005376:	f000 80d8 	beq.w	800552a <_printf_i+0x1d2>
 800537a:	2f58      	cmp	r7, #88	; 0x58
 800537c:	f000 80a3 	beq.w	80054c6 <_printf_i+0x16e>
 8005380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005388:	e03a      	b.n	8005400 <_printf_i+0xa8>
 800538a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538e:	2b15      	cmp	r3, #21
 8005390:	d8f6      	bhi.n	8005380 <_printf_i+0x28>
 8005392:	a101      	add	r1, pc, #4	; (adr r1, 8005398 <_printf_i+0x40>)
 8005394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005398:	080053f1 	.word	0x080053f1
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005381 	.word	0x08005381
 80053a4:	08005381 	.word	0x08005381
 80053a8:	08005381 	.word	0x08005381
 80053ac:	08005381 	.word	0x08005381
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005381 	.word	0x08005381
 80053b8:	08005381 	.word	0x08005381
 80053bc:	08005381 	.word	0x08005381
 80053c0:	08005381 	.word	0x08005381
 80053c4:	08005511 	.word	0x08005511
 80053c8:	08005435 	.word	0x08005435
 80053cc:	080054f3 	.word	0x080054f3
 80053d0:	08005381 	.word	0x08005381
 80053d4:	08005381 	.word	0x08005381
 80053d8:	08005533 	.word	0x08005533
 80053dc:	08005381 	.word	0x08005381
 80053e0:	08005435 	.word	0x08005435
 80053e4:	08005381 	.word	0x08005381
 80053e8:	08005381 	.word	0x08005381
 80053ec:	080054fb 	.word	0x080054fb
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	602a      	str	r2, [r5, #0]
 80053f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005400:	2301      	movs	r3, #1
 8005402:	e0a3      	b.n	800554c <_printf_i+0x1f4>
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	6829      	ldr	r1, [r5, #0]
 8005408:	0606      	lsls	r6, r0, #24
 800540a:	f101 0304 	add.w	r3, r1, #4
 800540e:	d50a      	bpl.n	8005426 <_printf_i+0xce>
 8005410:	680e      	ldr	r6, [r1, #0]
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	2e00      	cmp	r6, #0
 8005416:	da03      	bge.n	8005420 <_printf_i+0xc8>
 8005418:	232d      	movs	r3, #45	; 0x2d
 800541a:	4276      	negs	r6, r6
 800541c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005420:	485e      	ldr	r0, [pc, #376]	; (800559c <_printf_i+0x244>)
 8005422:	230a      	movs	r3, #10
 8005424:	e019      	b.n	800545a <_printf_i+0x102>
 8005426:	680e      	ldr	r6, [r1, #0]
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800542e:	bf18      	it	ne
 8005430:	b236      	sxthne	r6, r6
 8005432:	e7ef      	b.n	8005414 <_printf_i+0xbc>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	6820      	ldr	r0, [r4, #0]
 8005438:	1d19      	adds	r1, r3, #4
 800543a:	6029      	str	r1, [r5, #0]
 800543c:	0601      	lsls	r1, r0, #24
 800543e:	d501      	bpl.n	8005444 <_printf_i+0xec>
 8005440:	681e      	ldr	r6, [r3, #0]
 8005442:	e002      	b.n	800544a <_printf_i+0xf2>
 8005444:	0646      	lsls	r6, r0, #25
 8005446:	d5fb      	bpl.n	8005440 <_printf_i+0xe8>
 8005448:	881e      	ldrh	r6, [r3, #0]
 800544a:	4854      	ldr	r0, [pc, #336]	; (800559c <_printf_i+0x244>)
 800544c:	2f6f      	cmp	r7, #111	; 0x6f
 800544e:	bf0c      	ite	eq
 8005450:	2308      	moveq	r3, #8
 8005452:	230a      	movne	r3, #10
 8005454:	2100      	movs	r1, #0
 8005456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800545a:	6865      	ldr	r5, [r4, #4]
 800545c:	60a5      	str	r5, [r4, #8]
 800545e:	2d00      	cmp	r5, #0
 8005460:	bfa2      	ittt	ge
 8005462:	6821      	ldrge	r1, [r4, #0]
 8005464:	f021 0104 	bicge.w	r1, r1, #4
 8005468:	6021      	strge	r1, [r4, #0]
 800546a:	b90e      	cbnz	r6, 8005470 <_printf_i+0x118>
 800546c:	2d00      	cmp	r5, #0
 800546e:	d04d      	beq.n	800550c <_printf_i+0x1b4>
 8005470:	4615      	mov	r5, r2
 8005472:	fbb6 f1f3 	udiv	r1, r6, r3
 8005476:	fb03 6711 	mls	r7, r3, r1, r6
 800547a:	5dc7      	ldrb	r7, [r0, r7]
 800547c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005480:	4637      	mov	r7, r6
 8005482:	42bb      	cmp	r3, r7
 8005484:	460e      	mov	r6, r1
 8005486:	d9f4      	bls.n	8005472 <_printf_i+0x11a>
 8005488:	2b08      	cmp	r3, #8
 800548a:	d10b      	bne.n	80054a4 <_printf_i+0x14c>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	07de      	lsls	r6, r3, #31
 8005490:	d508      	bpl.n	80054a4 <_printf_i+0x14c>
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	6861      	ldr	r1, [r4, #4]
 8005496:	4299      	cmp	r1, r3
 8005498:	bfde      	ittt	le
 800549a:	2330      	movle	r3, #48	; 0x30
 800549c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054a4:	1b52      	subs	r2, r2, r5
 80054a6:	6122      	str	r2, [r4, #16]
 80054a8:	f8cd a000 	str.w	sl, [sp]
 80054ac:	464b      	mov	r3, r9
 80054ae:	aa03      	add	r2, sp, #12
 80054b0:	4621      	mov	r1, r4
 80054b2:	4640      	mov	r0, r8
 80054b4:	f7ff fee2 	bl	800527c <_printf_common>
 80054b8:	3001      	adds	r0, #1
 80054ba:	d14c      	bne.n	8005556 <_printf_i+0x1fe>
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295
 80054c0:	b004      	add	sp, #16
 80054c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c6:	4835      	ldr	r0, [pc, #212]	; (800559c <_printf_i+0x244>)
 80054c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054cc:	6829      	ldr	r1, [r5, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80054d4:	6029      	str	r1, [r5, #0]
 80054d6:	061d      	lsls	r5, r3, #24
 80054d8:	d514      	bpl.n	8005504 <_printf_i+0x1ac>
 80054da:	07df      	lsls	r7, r3, #31
 80054dc:	bf44      	itt	mi
 80054de:	f043 0320 	orrmi.w	r3, r3, #32
 80054e2:	6023      	strmi	r3, [r4, #0]
 80054e4:	b91e      	cbnz	r6, 80054ee <_printf_i+0x196>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f023 0320 	bic.w	r3, r3, #32
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	2310      	movs	r3, #16
 80054f0:	e7b0      	b.n	8005454 <_printf_i+0xfc>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	f043 0320 	orr.w	r3, r3, #32
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	2378      	movs	r3, #120	; 0x78
 80054fc:	4828      	ldr	r0, [pc, #160]	; (80055a0 <_printf_i+0x248>)
 80054fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005502:	e7e3      	b.n	80054cc <_printf_i+0x174>
 8005504:	0659      	lsls	r1, r3, #25
 8005506:	bf48      	it	mi
 8005508:	b2b6      	uxthmi	r6, r6
 800550a:	e7e6      	b.n	80054da <_printf_i+0x182>
 800550c:	4615      	mov	r5, r2
 800550e:	e7bb      	b.n	8005488 <_printf_i+0x130>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	6826      	ldr	r6, [r4, #0]
 8005514:	6961      	ldr	r1, [r4, #20]
 8005516:	1d18      	adds	r0, r3, #4
 8005518:	6028      	str	r0, [r5, #0]
 800551a:	0635      	lsls	r5, r6, #24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	d501      	bpl.n	8005524 <_printf_i+0x1cc>
 8005520:	6019      	str	r1, [r3, #0]
 8005522:	e002      	b.n	800552a <_printf_i+0x1d2>
 8005524:	0670      	lsls	r0, r6, #25
 8005526:	d5fb      	bpl.n	8005520 <_printf_i+0x1c8>
 8005528:	8019      	strh	r1, [r3, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	4615      	mov	r5, r2
 8005530:	e7ba      	b.n	80054a8 <_printf_i+0x150>
 8005532:	682b      	ldr	r3, [r5, #0]
 8005534:	1d1a      	adds	r2, r3, #4
 8005536:	602a      	str	r2, [r5, #0]
 8005538:	681d      	ldr	r5, [r3, #0]
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	2100      	movs	r1, #0
 800553e:	4628      	mov	r0, r5
 8005540:	f7fa fe56 	bl	80001f0 <memchr>
 8005544:	b108      	cbz	r0, 800554a <_printf_i+0x1f2>
 8005546:	1b40      	subs	r0, r0, r5
 8005548:	6060      	str	r0, [r4, #4]
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	6123      	str	r3, [r4, #16]
 800554e:	2300      	movs	r3, #0
 8005550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005554:	e7a8      	b.n	80054a8 <_printf_i+0x150>
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	462a      	mov	r2, r5
 800555a:	4649      	mov	r1, r9
 800555c:	4640      	mov	r0, r8
 800555e:	47d0      	blx	sl
 8005560:	3001      	adds	r0, #1
 8005562:	d0ab      	beq.n	80054bc <_printf_i+0x164>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	079b      	lsls	r3, r3, #30
 8005568:	d413      	bmi.n	8005592 <_printf_i+0x23a>
 800556a:	68e0      	ldr	r0, [r4, #12]
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	4298      	cmp	r0, r3
 8005570:	bfb8      	it	lt
 8005572:	4618      	movlt	r0, r3
 8005574:	e7a4      	b.n	80054c0 <_printf_i+0x168>
 8005576:	2301      	movs	r3, #1
 8005578:	4632      	mov	r2, r6
 800557a:	4649      	mov	r1, r9
 800557c:	4640      	mov	r0, r8
 800557e:	47d0      	blx	sl
 8005580:	3001      	adds	r0, #1
 8005582:	d09b      	beq.n	80054bc <_printf_i+0x164>
 8005584:	3501      	adds	r5, #1
 8005586:	68e3      	ldr	r3, [r4, #12]
 8005588:	9903      	ldr	r1, [sp, #12]
 800558a:	1a5b      	subs	r3, r3, r1
 800558c:	42ab      	cmp	r3, r5
 800558e:	dcf2      	bgt.n	8005576 <_printf_i+0x21e>
 8005590:	e7eb      	b.n	800556a <_printf_i+0x212>
 8005592:	2500      	movs	r5, #0
 8005594:	f104 0619 	add.w	r6, r4, #25
 8005598:	e7f5      	b.n	8005586 <_printf_i+0x22e>
 800559a:	bf00      	nop
 800559c:	080059c1 	.word	0x080059c1
 80055a0:	080059d2 	.word	0x080059d2

080055a4 <memmove>:
 80055a4:	4288      	cmp	r0, r1
 80055a6:	b510      	push	{r4, lr}
 80055a8:	eb01 0402 	add.w	r4, r1, r2
 80055ac:	d902      	bls.n	80055b4 <memmove+0x10>
 80055ae:	4284      	cmp	r4, r0
 80055b0:	4623      	mov	r3, r4
 80055b2:	d807      	bhi.n	80055c4 <memmove+0x20>
 80055b4:	1e43      	subs	r3, r0, #1
 80055b6:	42a1      	cmp	r1, r4
 80055b8:	d008      	beq.n	80055cc <memmove+0x28>
 80055ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055c2:	e7f8      	b.n	80055b6 <memmove+0x12>
 80055c4:	4402      	add	r2, r0
 80055c6:	4601      	mov	r1, r0
 80055c8:	428a      	cmp	r2, r1
 80055ca:	d100      	bne.n	80055ce <memmove+0x2a>
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055d6:	e7f7      	b.n	80055c8 <memmove+0x24>

080055d8 <_free_r>:
 80055d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055da:	2900      	cmp	r1, #0
 80055dc:	d044      	beq.n	8005668 <_free_r+0x90>
 80055de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e2:	9001      	str	r0, [sp, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f1a1 0404 	sub.w	r4, r1, #4
 80055ea:	bfb8      	it	lt
 80055ec:	18e4      	addlt	r4, r4, r3
 80055ee:	f000 f913 	bl	8005818 <__malloc_lock>
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <_free_r+0x94>)
 80055f4:	9801      	ldr	r0, [sp, #4]
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	b933      	cbnz	r3, 8005608 <_free_r+0x30>
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	6014      	str	r4, [r2, #0]
 80055fe:	b003      	add	sp, #12
 8005600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005604:	f000 b90e 	b.w	8005824 <__malloc_unlock>
 8005608:	42a3      	cmp	r3, r4
 800560a:	d908      	bls.n	800561e <_free_r+0x46>
 800560c:	6825      	ldr	r5, [r4, #0]
 800560e:	1961      	adds	r1, r4, r5
 8005610:	428b      	cmp	r3, r1
 8005612:	bf01      	itttt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	1949      	addeq	r1, r1, r5
 800561a:	6021      	streq	r1, [r4, #0]
 800561c:	e7ed      	b.n	80055fa <_free_r+0x22>
 800561e:	461a      	mov	r2, r3
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b10b      	cbz	r3, 8005628 <_free_r+0x50>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d9fa      	bls.n	800561e <_free_r+0x46>
 8005628:	6811      	ldr	r1, [r2, #0]
 800562a:	1855      	adds	r5, r2, r1
 800562c:	42a5      	cmp	r5, r4
 800562e:	d10b      	bne.n	8005648 <_free_r+0x70>
 8005630:	6824      	ldr	r4, [r4, #0]
 8005632:	4421      	add	r1, r4
 8005634:	1854      	adds	r4, r2, r1
 8005636:	42a3      	cmp	r3, r4
 8005638:	6011      	str	r1, [r2, #0]
 800563a:	d1e0      	bne.n	80055fe <_free_r+0x26>
 800563c:	681c      	ldr	r4, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	6053      	str	r3, [r2, #4]
 8005642:	4421      	add	r1, r4
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	e7da      	b.n	80055fe <_free_r+0x26>
 8005648:	d902      	bls.n	8005650 <_free_r+0x78>
 800564a:	230c      	movs	r3, #12
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	e7d6      	b.n	80055fe <_free_r+0x26>
 8005650:	6825      	ldr	r5, [r4, #0]
 8005652:	1961      	adds	r1, r4, r5
 8005654:	428b      	cmp	r3, r1
 8005656:	bf04      	itt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	bf04      	itt	eq
 8005660:	1949      	addeq	r1, r1, r5
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	6054      	str	r4, [r2, #4]
 8005666:	e7ca      	b.n	80055fe <_free_r+0x26>
 8005668:	b003      	add	sp, #12
 800566a:	bd30      	pop	{r4, r5, pc}
 800566c:	20000250 	.word	0x20000250

08005670 <sbrk_aligned>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4e0e      	ldr	r6, [pc, #56]	; (80056ac <sbrk_aligned+0x3c>)
 8005674:	460c      	mov	r4, r1
 8005676:	6831      	ldr	r1, [r6, #0]
 8005678:	4605      	mov	r5, r0
 800567a:	b911      	cbnz	r1, 8005682 <sbrk_aligned+0x12>
 800567c:	f000 f8bc 	bl	80057f8 <_sbrk_r>
 8005680:	6030      	str	r0, [r6, #0]
 8005682:	4621      	mov	r1, r4
 8005684:	4628      	mov	r0, r5
 8005686:	f000 f8b7 	bl	80057f8 <_sbrk_r>
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	d00a      	beq.n	80056a4 <sbrk_aligned+0x34>
 800568e:	1cc4      	adds	r4, r0, #3
 8005690:	f024 0403 	bic.w	r4, r4, #3
 8005694:	42a0      	cmp	r0, r4
 8005696:	d007      	beq.n	80056a8 <sbrk_aligned+0x38>
 8005698:	1a21      	subs	r1, r4, r0
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f8ac 	bl	80057f8 <_sbrk_r>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d101      	bne.n	80056a8 <sbrk_aligned+0x38>
 80056a4:	f04f 34ff 	mov.w	r4, #4294967295
 80056a8:	4620      	mov	r0, r4
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	20000254 	.word	0x20000254

080056b0 <_malloc_r>:
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	1ccd      	adds	r5, r1, #3
 80056b6:	f025 0503 	bic.w	r5, r5, #3
 80056ba:	3508      	adds	r5, #8
 80056bc:	2d0c      	cmp	r5, #12
 80056be:	bf38      	it	cc
 80056c0:	250c      	movcc	r5, #12
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	4607      	mov	r7, r0
 80056c6:	db01      	blt.n	80056cc <_malloc_r+0x1c>
 80056c8:	42a9      	cmp	r1, r5
 80056ca:	d905      	bls.n	80056d8 <_malloc_r+0x28>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	2600      	movs	r6, #0
 80056d2:	4630      	mov	r0, r6
 80056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d8:	4e2e      	ldr	r6, [pc, #184]	; (8005794 <_malloc_r+0xe4>)
 80056da:	f000 f89d 	bl	8005818 <__malloc_lock>
 80056de:	6833      	ldr	r3, [r6, #0]
 80056e0:	461c      	mov	r4, r3
 80056e2:	bb34      	cbnz	r4, 8005732 <_malloc_r+0x82>
 80056e4:	4629      	mov	r1, r5
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ffc2 	bl	8005670 <sbrk_aligned>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	4604      	mov	r4, r0
 80056f0:	d14d      	bne.n	800578e <_malloc_r+0xde>
 80056f2:	6834      	ldr	r4, [r6, #0]
 80056f4:	4626      	mov	r6, r4
 80056f6:	2e00      	cmp	r6, #0
 80056f8:	d140      	bne.n	800577c <_malloc_r+0xcc>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	4631      	mov	r1, r6
 80056fe:	4638      	mov	r0, r7
 8005700:	eb04 0803 	add.w	r8, r4, r3
 8005704:	f000 f878 	bl	80057f8 <_sbrk_r>
 8005708:	4580      	cmp	r8, r0
 800570a:	d13a      	bne.n	8005782 <_malloc_r+0xd2>
 800570c:	6821      	ldr	r1, [r4, #0]
 800570e:	3503      	adds	r5, #3
 8005710:	1a6d      	subs	r5, r5, r1
 8005712:	f025 0503 	bic.w	r5, r5, #3
 8005716:	3508      	adds	r5, #8
 8005718:	2d0c      	cmp	r5, #12
 800571a:	bf38      	it	cc
 800571c:	250c      	movcc	r5, #12
 800571e:	4629      	mov	r1, r5
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ffa5 	bl	8005670 <sbrk_aligned>
 8005726:	3001      	adds	r0, #1
 8005728:	d02b      	beq.n	8005782 <_malloc_r+0xd2>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	442b      	add	r3, r5
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	e00e      	b.n	8005750 <_malloc_r+0xa0>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	1b52      	subs	r2, r2, r5
 8005736:	d41e      	bmi.n	8005776 <_malloc_r+0xc6>
 8005738:	2a0b      	cmp	r2, #11
 800573a:	d916      	bls.n	800576a <_malloc_r+0xba>
 800573c:	1961      	adds	r1, r4, r5
 800573e:	42a3      	cmp	r3, r4
 8005740:	6025      	str	r5, [r4, #0]
 8005742:	bf18      	it	ne
 8005744:	6059      	strne	r1, [r3, #4]
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	bf08      	it	eq
 800574a:	6031      	streq	r1, [r6, #0]
 800574c:	5162      	str	r2, [r4, r5]
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4638      	mov	r0, r7
 8005752:	f104 060b 	add.w	r6, r4, #11
 8005756:	f000 f865 	bl	8005824 <__malloc_unlock>
 800575a:	f026 0607 	bic.w	r6, r6, #7
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	1af2      	subs	r2, r6, r3
 8005762:	d0b6      	beq.n	80056d2 <_malloc_r+0x22>
 8005764:	1b9b      	subs	r3, r3, r6
 8005766:	50a3      	str	r3, [r4, r2]
 8005768:	e7b3      	b.n	80056d2 <_malloc_r+0x22>
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	42a3      	cmp	r3, r4
 800576e:	bf0c      	ite	eq
 8005770:	6032      	streq	r2, [r6, #0]
 8005772:	605a      	strne	r2, [r3, #4]
 8005774:	e7ec      	b.n	8005750 <_malloc_r+0xa0>
 8005776:	4623      	mov	r3, r4
 8005778:	6864      	ldr	r4, [r4, #4]
 800577a:	e7b2      	b.n	80056e2 <_malloc_r+0x32>
 800577c:	4634      	mov	r4, r6
 800577e:	6876      	ldr	r6, [r6, #4]
 8005780:	e7b9      	b.n	80056f6 <_malloc_r+0x46>
 8005782:	230c      	movs	r3, #12
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	4638      	mov	r0, r7
 8005788:	f000 f84c 	bl	8005824 <__malloc_unlock>
 800578c:	e7a1      	b.n	80056d2 <_malloc_r+0x22>
 800578e:	6025      	str	r5, [r4, #0]
 8005790:	e7de      	b.n	8005750 <_malloc_r+0xa0>
 8005792:	bf00      	nop
 8005794:	20000250 	.word	0x20000250

08005798 <_realloc_r>:
 8005798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579c:	4680      	mov	r8, r0
 800579e:	4614      	mov	r4, r2
 80057a0:	460e      	mov	r6, r1
 80057a2:	b921      	cbnz	r1, 80057ae <_realloc_r+0x16>
 80057a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	4611      	mov	r1, r2
 80057aa:	f7ff bf81 	b.w	80056b0 <_malloc_r>
 80057ae:	b92a      	cbnz	r2, 80057bc <_realloc_r+0x24>
 80057b0:	f7ff ff12 	bl	80055d8 <_free_r>
 80057b4:	4625      	mov	r5, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057bc:	f000 f838 	bl	8005830 <_malloc_usable_size_r>
 80057c0:	4284      	cmp	r4, r0
 80057c2:	4607      	mov	r7, r0
 80057c4:	d802      	bhi.n	80057cc <_realloc_r+0x34>
 80057c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057ca:	d812      	bhi.n	80057f2 <_realloc_r+0x5a>
 80057cc:	4621      	mov	r1, r4
 80057ce:	4640      	mov	r0, r8
 80057d0:	f7ff ff6e 	bl	80056b0 <_malloc_r>
 80057d4:	4605      	mov	r5, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d0ed      	beq.n	80057b6 <_realloc_r+0x1e>
 80057da:	42bc      	cmp	r4, r7
 80057dc:	4622      	mov	r2, r4
 80057de:	4631      	mov	r1, r6
 80057e0:	bf28      	it	cs
 80057e2:	463a      	movcs	r2, r7
 80057e4:	f7ff fb7e 	bl	8004ee4 <memcpy>
 80057e8:	4631      	mov	r1, r6
 80057ea:	4640      	mov	r0, r8
 80057ec:	f7ff fef4 	bl	80055d8 <_free_r>
 80057f0:	e7e1      	b.n	80057b6 <_realloc_r+0x1e>
 80057f2:	4635      	mov	r5, r6
 80057f4:	e7df      	b.n	80057b6 <_realloc_r+0x1e>
	...

080057f8 <_sbrk_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4d06      	ldr	r5, [pc, #24]	; (8005814 <_sbrk_r+0x1c>)
 80057fc:	2300      	movs	r3, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	f7fc f828 	bl	8001858 <_sbrk>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_sbrk_r+0x1a>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_sbrk_r+0x1a>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000258 	.word	0x20000258

08005818 <__malloc_lock>:
 8005818:	4801      	ldr	r0, [pc, #4]	; (8005820 <__malloc_lock+0x8>)
 800581a:	f000 b811 	b.w	8005840 <__retarget_lock_acquire_recursive>
 800581e:	bf00      	nop
 8005820:	2000025c 	.word	0x2000025c

08005824 <__malloc_unlock>:
 8005824:	4801      	ldr	r0, [pc, #4]	; (800582c <__malloc_unlock+0x8>)
 8005826:	f000 b80c 	b.w	8005842 <__retarget_lock_release_recursive>
 800582a:	bf00      	nop
 800582c:	2000025c 	.word	0x2000025c

08005830 <_malloc_usable_size_r>:
 8005830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005834:	1f18      	subs	r0, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	bfbc      	itt	lt
 800583a:	580b      	ldrlt	r3, [r1, r0]
 800583c:	18c0      	addlt	r0, r0, r3
 800583e:	4770      	bx	lr

08005840 <__retarget_lock_acquire_recursive>:
 8005840:	4770      	bx	lr

08005842 <__retarget_lock_release_recursive>:
 8005842:	4770      	bx	lr
 8005844:	0000      	movs	r0, r0
	...

08005848 <ceil>:
 8005848:	ec51 0b10 	vmov	r0, r1, d0
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005854:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005858:	2e13      	cmp	r6, #19
 800585a:	ee10 5a10 	vmov	r5, s0
 800585e:	ee10 8a10 	vmov	r8, s0
 8005862:	460c      	mov	r4, r1
 8005864:	dc30      	bgt.n	80058c8 <ceil+0x80>
 8005866:	2e00      	cmp	r6, #0
 8005868:	da12      	bge.n	8005890 <ceil+0x48>
 800586a:	a335      	add	r3, pc, #212	; (adr r3, 8005940 <ceil+0xf8>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fd14 	bl	800029c <__adddf3>
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	f7fb f956 	bl	8000b28 <__aeabi_dcmpgt>
 800587c:	b128      	cbz	r0, 800588a <ceil+0x42>
 800587e:	2c00      	cmp	r4, #0
 8005880:	db55      	blt.n	800592e <ceil+0xe6>
 8005882:	432c      	orrs	r4, r5
 8005884:	d057      	beq.n	8005936 <ceil+0xee>
 8005886:	4c30      	ldr	r4, [pc, #192]	; (8005948 <ceil+0x100>)
 8005888:	2500      	movs	r5, #0
 800588a:	4621      	mov	r1, r4
 800588c:	4628      	mov	r0, r5
 800588e:	e025      	b.n	80058dc <ceil+0x94>
 8005890:	4f2e      	ldr	r7, [pc, #184]	; (800594c <ceil+0x104>)
 8005892:	4137      	asrs	r7, r6
 8005894:	ea01 0307 	and.w	r3, r1, r7
 8005898:	4303      	orrs	r3, r0
 800589a:	d01f      	beq.n	80058dc <ceil+0x94>
 800589c:	a328      	add	r3, pc, #160	; (adr r3, 8005940 <ceil+0xf8>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fcfb 	bl	800029c <__adddf3>
 80058a6:	2200      	movs	r2, #0
 80058a8:	2300      	movs	r3, #0
 80058aa:	f7fb f93d 	bl	8000b28 <__aeabi_dcmpgt>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d0eb      	beq.n	800588a <ceil+0x42>
 80058b2:	2c00      	cmp	r4, #0
 80058b4:	bfc2      	ittt	gt
 80058b6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80058ba:	fa43 f606 	asrgt.w	r6, r3, r6
 80058be:	19a4      	addgt	r4, r4, r6
 80058c0:	ea24 0407 	bic.w	r4, r4, r7
 80058c4:	2500      	movs	r5, #0
 80058c6:	e7e0      	b.n	800588a <ceil+0x42>
 80058c8:	2e33      	cmp	r6, #51	; 0x33
 80058ca:	dd0b      	ble.n	80058e4 <ceil+0x9c>
 80058cc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80058d0:	d104      	bne.n	80058dc <ceil+0x94>
 80058d2:	ee10 2a10 	vmov	r2, s0
 80058d6:	460b      	mov	r3, r1
 80058d8:	f7fa fce0 	bl	800029c <__adddf3>
 80058dc:	ec41 0b10 	vmov	d0, r0, r1
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ec:	fa23 f707 	lsr.w	r7, r3, r7
 80058f0:	4207      	tst	r7, r0
 80058f2:	d0f3      	beq.n	80058dc <ceil+0x94>
 80058f4:	a312      	add	r3, pc, #72	; (adr r3, 8005940 <ceil+0xf8>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fa fccf 	bl	800029c <__adddf3>
 80058fe:	2200      	movs	r2, #0
 8005900:	2300      	movs	r3, #0
 8005902:	f7fb f911 	bl	8000b28 <__aeabi_dcmpgt>
 8005906:	2800      	cmp	r0, #0
 8005908:	d0bf      	beq.n	800588a <ceil+0x42>
 800590a:	2c00      	cmp	r4, #0
 800590c:	dd02      	ble.n	8005914 <ceil+0xcc>
 800590e:	2e14      	cmp	r6, #20
 8005910:	d103      	bne.n	800591a <ceil+0xd2>
 8005912:	3401      	adds	r4, #1
 8005914:	ea25 0507 	bic.w	r5, r5, r7
 8005918:	e7b7      	b.n	800588a <ceil+0x42>
 800591a:	2301      	movs	r3, #1
 800591c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005920:	fa03 f606 	lsl.w	r6, r3, r6
 8005924:	4435      	add	r5, r6
 8005926:	4545      	cmp	r5, r8
 8005928:	bf38      	it	cc
 800592a:	18e4      	addcc	r4, r4, r3
 800592c:	e7f2      	b.n	8005914 <ceil+0xcc>
 800592e:	2500      	movs	r5, #0
 8005930:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005934:	e7a9      	b.n	800588a <ceil+0x42>
 8005936:	4625      	mov	r5, r4
 8005938:	e7a7      	b.n	800588a <ceil+0x42>
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	8800759c 	.word	0x8800759c
 8005944:	7e37e43c 	.word	0x7e37e43c
 8005948:	3ff00000 	.word	0x3ff00000
 800594c:	000fffff 	.word	0x000fffff

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
